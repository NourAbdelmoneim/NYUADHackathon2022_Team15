define(['dart_sdk', 'packages/google_maps_flutter_platform_interface/src/events/map_event.dart', 'packages/stream_transform/src/where.dart', 'packages/google_maps_flutter_platform_interface/src/types/utils/tile_overlay.dart', 'packages/flutter/src/foundation/basic_types.dart', 'packages/flutter/src/gestures/recognizer.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/widgets/platform_view.dart', 'packages/google_maps/src/generated/google_maps_core.js.g.dart', 'packages/google_maps_flutter_platform_interface/src/types/location.dart', 'packages/google_maps_flutter_web/src/third_party/to_screen_location/to_screen_location.dart', 'packages/google_maps_flutter_platform_interface/src/types/screen_coordinate.dart', 'packages/sanitize_html/sanitize_html.dart'], (function load__packages__google_maps_flutter_web__src__types_dart(dart_sdk, packages__google_maps_flutter_platform_interface__src__events__map_event$46dart, packages__stream_transform__src__where$46dart, packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart, packages__flutter__src__foundation__basic_types$46dart, packages__flutter__src__gestures__recognizer$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__widgets__platform_view$46dart, packages__google_maps__src__generated__google_maps_core$46js$46g$46dart, packages__google_maps_flutter_platform_interface__src__types__location$46dart, packages__google_maps_flutter_web__src__third_party__to_screen_location__to_screen_location$46dart, packages__google_maps_flutter_platform_interface__src__types__screen_coordinate$46dart, packages__sanitize_html__sanitize_html$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const html = dart_sdk.html;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const convert = dart_sdk.convert;
  const js_util = dart_sdk.js_util;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const google_maps_flutter_platform = packages__google_maps_flutter_platform_interface__src__events__map_event$46dart.src__platform_interface__google_maps_flutter_platform;
  const map_event = packages__google_maps_flutter_platform_interface__src__events__map_event$46dart.src__events__map_event;
  const where = packages__stream_transform__src__where$46dart.src__where;
  const marker = packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart.src__types__marker;
  const polygon = packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart.src__types__polygon;
  const polyline = packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart.src__types__polyline;
  const circle = packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart.src__types__circle;
  const tile_overlay = packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart.src__types__tile_overlay;
  const camera = packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart.src__types__camera;
  const circle_updates = packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart.src__types__circle_updates;
  const polygon_updates = packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart.src__types__polygon_updates;
  const polyline_updates = packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart.src__types__polyline_updates;
  const marker_updates = packages__google_maps_flutter_platform_interface__src__types__utils__tile_overlay$46dart.src__types__marker_updates;
  const basic_types = packages__flutter__src__foundation__basic_types$46dart.src__foundation__basic_types;
  const recognizer = packages__flutter__src__gestures__recognizer$46dart.src__gestures__recognizer;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const platform_view = packages__flutter__src__widgets__platform_view$46dart.src__widgets__platform_view;
  const google_maps_core$46js$46g = packages__google_maps__src__generated__google_maps_core$46js$46g$46dart.src__generated__google_maps_core$46js$46g;
  const location = packages__google_maps_flutter_platform_interface__src__types__location$46dart.src__types__location;
  const to_screen_location = packages__google_maps_flutter_web__src__third_party__to_screen_location__to_screen_location$46dart.src__third_party__to_screen_location__to_screen_location;
  const screen_coordinate = packages__google_maps_flutter_platform_interface__src__types__screen_coordinate$46dart.src__types__screen_coordinate;
  const sanitize_html = packages__sanitize_html__sanitize_html$46dart.sanitize_html;
  var types = Object.create(dart.library);
  var google_maps_flutter_web = Object.create(dart.library);
  var $_get = dartx._get;
  var $remove = dartx.remove;
  var $_set = dartx._set;
  var $id = dartx.id;
  var $width = dartx.width;
  var $style = dartx.style;
  var $height = dartx.height;
  var $entries = dartx.entries;
  var $toInt = dartx.toInt;
  var $toDouble = dartx.toDouble;
  var $forEach = dartx.forEach;
  var $onClick = dartx.onClick;
  var $values = dartx.values;
  var $where = dartx.where;
  var $toRadixString = dartx.toRadixString;
  var $padLeft = dartx.padLeft;
  var $substring = dartx.substring;
  var $containsKey = dartx.containsKey;
  var $isNotEmpty = dartx.isNotEmpty;
  var $keys = dartx.keys;
  var $toSet = dartx.toSet;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $isEmpty = dartx.isEmpty;
  var $className = dartx.className;
  var $innerText = dartx.innerText;
  var $children = dartx.children;
  var $add = dartx.add;
  var $setInnerHtml = dartx.setInnerHtml;
  var $length = dartx.length;
  var $reversed = dartx.reversed;
  var $modulo = dartx['%'];
  var $floor = dartx.floor;
  var $ceil = dartx.ceil;
  var $leftShift = dartx['<<'];
  dart._checkModuleNullSafetyMode(true);
  var T = {
    LinkedMapOfint$GoogleMapController: () => (T.LinkedMapOfint$GoogleMapController = dart.constFn(_js_helper.LinkedMap$(core.int, google_maps_flutter_web.GoogleMapController)))(),
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    FactoryOfOneSequenceGestureRecognizer: () => (T.FactoryOfOneSequenceGestureRecognizer = dart.constFn(basic_types.Factory$(recognizer.OneSequenceGestureRecognizer)))(),
    StreamControllerOfMapEvent: () => (T.StreamControllerOfMapEvent = dart.constFn(async.StreamController$(map_event.MapEvent)))(),
    WebMapReadyEventToNull: () => (T.WebMapReadyEventToNull = dart.constFn(dart.fnType(core.Null, [google_maps_flutter_web.WebMapReadyEvent])))(),
    intToHtmlElement: () => (T.intToHtmlElement = dart.constFn(dart.fnType(html.HtmlElement, [core.int])))(),
    voidToNull: () => (T.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),
    IconMouseEventTovoid: () => (T.IconMouseEventTovoid = dart.constFn(dart.fnType(dart.void, [dart.anonymousJSType("IconMouseEvent")])))(),
    MapMouseEventTovoid: () => (T.MapMouseEventTovoid = dart.constFn(dart.fnType(dart.void, [dart.anonymousJSType("MapMouseEvent")])))(),
    voidTovoid: () => (T.voidTovoid = dart.constFn(dart.fnType(dart.void, [dart.void])))(),
    LinkedMapOfCircleId$CircleController: () => (T.LinkedMapOfCircleId$CircleController = dart.constFn(_js_helper.LinkedMap$(circle.CircleId, google_maps_flutter_web.CircleController)))(),
    CircleTovoid: () => (T.CircleTovoid = dart.constFn(dart.fnType(dart.void, [circle.Circle])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    CircleIdTovoid: () => (T.CircleIdTovoid = dart.constFn(dart.fnType(dart.void, [circle.CircleId])))(),
    PolyMouseEventTovoid: () => (T.PolyMouseEventTovoid = dart.constFn(dart.fnType(dart.void, [dart.anonymousJSType("PolyMouseEvent")])))(),
    LinkedMapOfPolygonId$PolygonController: () => (T.LinkedMapOfPolygonId$PolygonController = dart.constFn(_js_helper.LinkedMap$(polygon.PolygonId, google_maps_flutter_web.PolygonController)))(),
    PolygonTovoid: () => (T.PolygonTovoid = dart.constFn(dart.fnType(dart.void, [polygon.Polygon])))(),
    PolygonIdTovoid: () => (T.PolygonIdTovoid = dart.constFn(dart.fnType(dart.void, [polygon.PolygonId])))(),
    LinkedMapOfPolylineId$PolylineController: () => (T.LinkedMapOfPolylineId$PolylineController = dart.constFn(_js_helper.LinkedMap$(polyline.PolylineId, google_maps_flutter_web.PolylineController)))(),
    PolylineTovoid: () => (T.PolylineTovoid = dart.constFn(dart.fnType(dart.void, [polyline.Polyline])))(),
    PolylineIdTovoid: () => (T.PolylineIdTovoid = dart.constFn(dart.fnType(dart.void, [polyline.PolylineId])))(),
    LinkedMapOfMarkerId$MarkerController: () => (T.LinkedMapOfMarkerId$MarkerController = dart.constFn(_js_helper.LinkedMap$(marker.MarkerId, google_maps_flutter_web.MarkerController)))(),
    MouseEventTovoid: () => (T.MouseEventTovoid = dart.constFn(dart.fnType(dart.void, [html.MouseEvent])))(),
    LatLngTovoid: () => (T.LatLngTovoid = dart.constFn(dart.fnType(dart.void, [dart.lazyJSType(() => dart.global.google.maps.LatLng, "google.maps.LatLng")])))(),
    HtmlElementN: () => (T.HtmlElementN = dart.constFn(dart.nullable(html.HtmlElement)))(),
    MarkerControllerTobool: () => (T.MarkerControllerTobool = dart.constFn(dart.fnType(core.bool, [google_maps_flutter_web.MarkerController])))(),
    MarkerControllerTovoid: () => (T.MarkerControllerTovoid = dart.constFn(dart.fnType(dart.void, [google_maps_flutter_web.MarkerController])))(),
    numN: () => (T.numN = dart.constFn(dart.nullable(core.num)))(),
    boolN: () => (T.boolN = dart.constFn(dart.nullable(core.bool)))(),
    ListOfMapTypeStyleN: () => (T.ListOfMapTypeStyleN = dart.constFn(core.List$(dart.nullable(dart.anonymousJSType("MapTypeStyle")))))(),
    ListNOfMapTypeStyleN: () => (T.ListNOfMapTypeStyleN = dart.constFn(dart.nullable(T.ListOfMapTypeStyleN())))(),
    JSArrayOfMapTypeStyle: () => (T.JSArrayOfMapTypeStyle = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("MapTypeStyle"))))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    dynamicTodynamic: () => (T.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    ObjectN: () => (T.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ObjectNAndObjectNToObjectN: () => (T.ObjectNAndObjectNToObjectN = dart.constFn(dart.fnType(T.ObjectN(), [T.ObjectN(), T.ObjectN()])))(),
    ListOfMapTypeStyle: () => (T.ListOfMapTypeStyle = dart.constFn(core.List$(dart.anonymousJSType("MapTypeStyle"))))(),
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    JSArrayOfLatLng: () => (T.JSArrayOfLatLng = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.google.maps.LatLng, "google.maps.LatLng"))))(),
    LatLngTovoid$1: () => (T.LatLngTovoid$1 = dart.constFn(dart.fnType(dart.void, [location.LatLng])))(),
    ListOfLatLng: () => (T.ListOfLatLng = dart.constFn(core.List$(dart.lazyJSType(() => dart.global.google.maps.LatLng, "google.maps.LatLng"))))(),
    JSArrayOfListOfLatLng: () => (T.JSArrayOfListOfLatLng = dart.constFn(_interceptors.JSArray$(T.ListOfLatLng())))(),
    LatLngToLatLng: () => (T.LatLngToLatLng = dart.constFn(dart.fnType(dart.lazyJSType(() => dart.global.google.maps.LatLng, "google.maps.LatLng"), [location.LatLng])))(),
    ListOfLatLng$1: () => (T.ListOfLatLng$1 = dart.constFn(core.List$(location.LatLng)))(),
    ListOfLatLngTovoid: () => (T.ListOfLatLngTovoid = dart.constFn(dart.fnType(dart.void, [T.ListOfLatLng$1()])))(),
    IdentityMapOfint$MapTypeId: () => (T.IdentityMapOfint$MapTypeId = dart.constFn(_js_helper.IdentityMap$(core.int, dart.lazyJSType(() => dart.global.google.maps.MapTypeId, "google.maps.MapTypeId"))))(),
    LinkedHashSetOfString: () => (T.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constSet(marker.Marker, []);
    },
    get C1() {
      return C[1] = dart.constSet(polygon.Polygon, []);
    },
    get C2() {
      return C[2] = dart.constSet(polyline.Polyline, []);
    },
    get C3() {
      return C[3] = dart.constSet(circle.Circle, []);
    },
    get C4() {
      return C[4] = dart.constSet(tile_overlay.TileOverlay, []);
    },
    get C5() {
      return C[5] = dart.constSet(T.FactoryOfOneSequenceGestureRecognizer(), []);
    },
    get C6() {
      return C[6] = dart.constMap(core.String, dart.dynamic, []);
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "viewType",
        [_Location_column]: 9,
        [_Location_line]: 37,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.constList([C[9] || CT.C9], widget_inspector._Location);
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[8] || CT.C8,
        [_Location_name]: null,
        [_Location_column]: 17,
        [_Location_line]: 36,
        [_Location_file]: "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_web-0.3.2+1/lib/src/google_maps_controller.dart"
      });
    }
  }, false);
  var C = Array(10).fill(void 0);
  var I = [
    "package:google_maps_flutter_web/src/types.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_web-0.3.2+1/lib/src/google_maps_flutter_web.dart",
    "package:google_maps_flutter_web/google_maps_flutter_web.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_web-0.3.2+1/lib/src/google_maps_controller.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_web-0.3.2+1/lib/src/circle.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_web-0.3.2+1/lib/src/polygon.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_web-0.3.2+1/lib/src/polyline.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_web-0.3.2+1/lib/src/marker.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/google_maps_flutter_web-0.3.2+1/lib/src/convert.dart"
  ];
  var __GeometryController_googleMap = dart.privateName(types, "_#GeometryController#googleMap");
  var __GeometryController_mapId = dart.privateName(types, "_#GeometryController#mapId");
  types.GeometryController = class GeometryController extends core.Object {
    get googleMap() {
      let t0;
      t0 = this[__GeometryController_googleMap];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("googleMap")) : t0;
    }
    set googleMap(t0) {
      this[__GeometryController_googleMap] = t0;
    }
    get mapId() {
      let t1;
      t1 = this[__GeometryController_mapId];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("mapId")) : t1;
    }
    set mapId(t1) {
      this[__GeometryController_mapId] = t1;
    }
    bindToMap(mapId, googleMap) {
      this.mapId = mapId;
      this.googleMap = googleMap;
    }
  };
  (types.GeometryController.new = function() {
    this[__GeometryController_googleMap] = null;
    this[__GeometryController_mapId] = null;
    ;
  }).prototype = types.GeometryController.prototype;
  dart.addTypeTests(types.GeometryController);
  dart.addTypeCaches(types.GeometryController);
  dart.setMethodSignature(types.GeometryController, () => ({
    __proto__: dart.getMethods(types.GeometryController.__proto__),
    bindToMap: dart.fnType(dart.void, [core.int, dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map")])
  }));
  dart.setGetterSignature(types.GeometryController, () => ({
    __proto__: dart.getGetters(types.GeometryController.__proto__),
    googleMap: dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map"),
    mapId: core.int
  }));
  dart.setSetterSignature(types.GeometryController, () => ({
    __proto__: dart.getSetters(types.GeometryController.__proto__),
    googleMap: dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map"),
    mapId: core.int
  }));
  dart.setLibraryUri(types.GeometryController, I[0]);
  dart.setFieldSignature(types.GeometryController, () => ({
    __proto__: dart.getFields(types.GeometryController.__proto__),
    [__GeometryController_googleMap]: dart.fieldType(dart.nullable(dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map"))),
    [__GeometryController_mapId]: dart.fieldType(dart.nullable(core.int))
  }));
  var _mapById = dart.privateName(google_maps_flutter_web, "_mapById");
  var _map = dart.privateName(google_maps_flutter_web, "_map");
  var _events = dart.privateName(google_maps_flutter_web, "_events");
  google_maps_flutter_web.GoogleMapsPlugin = class GoogleMapsPlugin extends google_maps_flutter_platform.GoogleMapsFlutterPlatform {
    static registerWith(registrar) {
      google_maps_flutter_platform.GoogleMapsFlutterPlatform.instance = new google_maps_flutter_web.GoogleMapsPlugin.new();
    }
    debugSetMapById(mapById) {
      this[_mapById] = mapById;
    }
    [_events](mapId) {
      return this[_map](mapId).events;
    }
    [_map](mapId) {
      let controller = this[_mapById][$_get](mapId);
      if (!(controller != null)) dart.assertFailed("Maps cannot be retrieved before calling buildView!", I[1], 31, 12, "controller != null");
      return google_maps_flutter_web.GoogleMapController.as(controller);
    }
    init(mapId) {
      return async.async(dart.void, (function* init() {
        if (!(this[_map](mapId) !== null)) dart.assertFailed("Must call buildWidget before init!", I[1], 41, 12, "_map(mapId) != null");
      }).bind(this));
    }
    updateMapOptions(optionsUpdate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* updateMapOptions() {
        this[_map](mapId).updateRawOptions(optionsUpdate);
      }).bind(this));
    }
    updateMarkers(markerUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* updateMarkers() {
        this[_map](mapId).updateMarkers(markerUpdates);
      }).bind(this));
    }
    updatePolygons(polygonUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* updatePolygons() {
        this[_map](mapId).updatePolygons(polygonUpdates);
      }).bind(this));
    }
    updatePolylines(polylineUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* updatePolylines() {
        this[_map](mapId).updatePolylines(polylineUpdates);
      }).bind(this));
    }
    updateCircles(circleUpdates, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* updateCircles() {
        this[_map](mapId).updateCircles(circleUpdates);
      }).bind(this));
    }
    updateTileOverlays(opts) {
      let newTileOverlays = opts && 'newTileOverlays' in opts ? opts.newTileOverlays : null;
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, function* updateTileOverlays() {
        return;
      });
    }
    clearTileCache(tileOverlayId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, function* clearTileCache() {
        return;
      });
    }
    animateCamera(cameraUpdate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* animateCamera() {
        return this.moveCamera(cameraUpdate, {mapId: mapId});
      }).bind(this));
    }
    moveCamera(cameraUpdate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* moveCamera() {
        return this[_map](mapId).moveCamera(cameraUpdate);
      }).bind(this));
    }
    setMapStyle(mapStyle, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* setMapStyle() {
        this[_map](mapId).updateRawOptions(new (T.IdentityMapOfString$dynamic()).from(["styles", google_maps_flutter_web._mapStyles(mapStyle)]));
      }).bind(this));
    }
    getVisibleRegion(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return this[_map](mapId).getVisibleRegion();
    }
    getScreenCoordinate(latLng, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return this[_map](mapId).getScreenCoordinate(latLng);
    }
    getLatLng(screenCoordinate, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return this[_map](mapId).getLatLng(screenCoordinate);
    }
    showMarkerInfoWindow(markerId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* showMarkerInfoWindow() {
        this[_map](mapId).showInfoWindow(markerId);
      }).bind(this));
    }
    hideMarkerInfoWindow(markerId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(dart.void, (function* hideMarkerInfoWindow() {
        this[_map](mapId).hideInfoWindow(markerId);
      }).bind(this));
    }
    isMarkerInfoWindowShown(markerId, opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return async.async(core.bool, (function* isMarkerInfoWindowShown() {
        return this[_map](mapId).isInfoWindowShown(markerId);
      }).bind(this));
    }
    getZoomLevel(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return this[_map](mapId).getZoomLevel();
    }
    onCameraMoveStarted(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.CameraMoveStartedEvent, this[_events](mapId));
    }
    onCameraMove(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.CameraMoveEvent, this[_events](mapId));
    }
    onCameraIdle(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.CameraIdleEvent, this[_events](mapId));
    }
    onMarkerTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.MarkerTapEvent, this[_events](mapId));
    }
    onInfoWindowTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.InfoWindowTapEvent, this[_events](mapId));
    }
    onMarkerDragStart(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.MarkerDragStartEvent, this[_events](mapId));
    }
    onMarkerDrag(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.MarkerDragEvent, this[_events](mapId));
    }
    onMarkerDragEnd(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.MarkerDragEndEvent, this[_events](mapId));
    }
    onPolylineTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.PolylineTapEvent, this[_events](mapId));
    }
    onPolygonTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.PolygonTapEvent, this[_events](mapId));
    }
    onCircleTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.CircleTapEvent, this[_events](mapId));
    }
    onTap(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.MapTapEvent, this[_events](mapId));
    }
    onLongPress(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      return where['Where|whereType'](map_event.MapEvent, map_event.MapLongPressEvent, this[_events](mapId));
    }
    dispose(opts) {
      let mapId = opts && 'mapId' in opts ? opts.mapId : null;
      this[_map](mapId).dispose();
      this[_mapById][$remove](mapId);
    }
    buildView(creationId, onPlatformViewCreated, opts) {
      let t2, t2$;
      let initialCameraPosition = opts && 'initialCameraPosition' in opts ? opts.initialCameraPosition : null;
      let markers = opts && 'markers' in opts ? opts.markers : C[0] || CT.C0;
      let polygons = opts && 'polygons' in opts ? opts.polygons : C[1] || CT.C1;
      let polylines = opts && 'polylines' in opts ? opts.polylines : C[2] || CT.C2;
      let circles = opts && 'circles' in opts ? opts.circles : C[3] || CT.C3;
      let tileOverlays = opts && 'tileOverlays' in opts ? opts.tileOverlays : C[4] || CT.C4;
      let gestureRecognizers = opts && 'gestureRecognizers' in opts ? opts.gestureRecognizers : C[5] || CT.C5;
      let mapOptions = opts && 'mapOptions' in opts ? opts.mapOptions : C[6] || CT.C6;
      if ((t2 = this[_mapById][$_get](creationId), t2 == null ? null : dart.dload(t2, 'widget')) != null) {
        return framework.Widget.as(dart.dload(this[_mapById][$_get](creationId), 'widget'));
      }
      let controller = T.StreamControllerOfMapEvent().broadcast();
      let mapController = (t2$ = new google_maps_flutter_web.GoogleMapController.new({initialCameraPosition: initialCameraPosition, mapId: creationId, streamController: controller, markers: markers, polygons: polygons, polylines: polylines, circles: circles, mapOptions: mapOptions}), (() => {
        t2$.init();
        return t2$;
      })());
      this[_mapById][$_set](creationId, mapController);
      where['Where|whereType'](map_event.MapEvent, google_maps_flutter_web.WebMapReadyEvent, mapController.events).first.then(core.Null, dart.fn(event => {
        if (!(creationId === event.mapId)) dart.assertFailed("Received WebMapReadyEvent for the wrong map", I[1], 326, 14, "creationId == event.mapId");
        onPlatformViewCreated(event.mapId);
      }, T.WebMapReadyEventToNull()));
      if (!(mapController.widget != null)) dart.assertFailed("The widget of a GoogleMapController cannot be null before calling dispose on it.", I[1], 332, 12, "mapController.widget != null");
      return dart.nullCheck(mapController.widget);
    }
  };
  (google_maps_flutter_web.GoogleMapsPlugin.new = function() {
    this[_mapById] = new (T.LinkedMapOfint$GoogleMapController()).new();
    google_maps_flutter_web.GoogleMapsPlugin.__proto__.new.call(this);
    ;
  }).prototype = google_maps_flutter_web.GoogleMapsPlugin.prototype;
  dart.addTypeTests(google_maps_flutter_web.GoogleMapsPlugin);
  dart.addTypeCaches(google_maps_flutter_web.GoogleMapsPlugin);
  dart.setMethodSignature(google_maps_flutter_web.GoogleMapsPlugin, () => ({
    __proto__: dart.getMethods(google_maps_flutter_web.GoogleMapsPlugin.__proto__),
    debugSetMapById: dart.fnType(dart.void, [core.Map$(core.int, google_maps_flutter_web.GoogleMapController)]),
    [_events]: dart.fnType(async.Stream$(map_event.MapEvent), [core.int]),
    [_map]: dart.fnType(google_maps_flutter_web.GoogleMapController, [core.int])
  }));
  dart.setLibraryUri(google_maps_flutter_web.GoogleMapsPlugin, I[2]);
  dart.setFieldSignature(google_maps_flutter_web.GoogleMapsPlugin, () => ({
    __proto__: dart.getFields(google_maps_flutter_web.GoogleMapsPlugin.__proto__),
    [_mapById]: dart.fieldType(core.Map)
  }));
  var _rawMapOptions = dart.privateName(google_maps_flutter_web, "_rawMapOptions");
  var _widget = dart.privateName(google_maps_flutter_web, "_widget");
  var __GoogleMapController__div = dart.privateName(google_maps_flutter_web, "_#GoogleMapController#_div");
  var _trafficLayer = dart.privateName(google_maps_flutter_web, "_trafficLayer");
  var _googleMap = dart.privateName(google_maps_flutter_web, "_googleMap");
  var _circlesController = dart.privateName(google_maps_flutter_web, "_circlesController");
  var _polygonsController = dart.privateName(google_maps_flutter_web, "_polygonsController");
  var _polylinesController = dart.privateName(google_maps_flutter_web, "_polylinesController");
  var _markersController = dart.privateName(google_maps_flutter_web, "_markersController");
  var _controllersBoundToMap = dart.privateName(google_maps_flutter_web, "_controllersBoundToMap");
  var _mapIsMoving = dart.privateName(google_maps_flutter_web, "_mapIsMoving");
  var _overrideCreateMap = dart.privateName(google_maps_flutter_web, "_overrideCreateMap");
  var _mapId = dart.privateName(google_maps_flutter_web, "_mapId");
  var _streamController = dart.privateName(google_maps_flutter_web, "_streamController");
  var _initialCameraPosition = dart.privateName(google_maps_flutter_web, "_initialCameraPosition");
  var _markers = dart.privateName(google_maps_flutter_web, "_markers");
  var _polygons = dart.privateName(google_maps_flutter_web, "_polygons");
  var _polylines = dart.privateName(google_maps_flutter_web, "_polylines");
  var _circles = dart.privateName(google_maps_flutter_web, "_circles");
  var _div = dart.privateName(google_maps_flutter_web, "_div");
  var _getViewType = dart.privateName(google_maps_flutter_web, "_getViewType");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  var _createMap = dart.privateName(google_maps_flutter_web, "_createMap");
  var _attachMapEvents = dart.privateName(google_maps_flutter_web, "_attachMapEvents");
  var _attachGeometryControllers = dart.privateName(google_maps_flutter_web, "_attachGeometryControllers");
  var _renderInitialGeometry = dart.privateName(google_maps_flutter_web, "_renderInitialGeometry");
  var _setTrafficLayer = dart.privateName(google_maps_flutter_web, "_setTrafficLayer");
  var _mergeRawOptions = dart.privateName(google_maps_flutter_web, "_mergeRawOptions");
  var _setOptions = dart.privateName(google_maps_flutter_web, "_setOptions");
  google_maps_flutter_web.GoogleMapController = class GoogleMapController extends core.Object {
    [_getViewType](mapId) {
      return "plugins.flutter.io/google_maps_" + dart.str(mapId);
    }
    get [_div]() {
      let t2;
      t2 = this[__GoogleMapController__div];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_div")) : t2;
    }
    set [_div](t2) {
      this[__GoogleMapController__div] = t2;
    }
    get widget() {
      if (this[_widget] == null && !this[_streamController].isClosed) {
        this[_widget] = new platform_view.HtmlElementView.new({viewType: this[_getViewType](this[_mapId]), $creationLocationd_0dea112b090073317d4: C[7] || CT.C7});
      }
      return this[_widget];
    }
    get trafficLayer() {
      return this[_trafficLayer];
    }
    get stream() {
      return this[_streamController];
    }
    get events() {
      return this[_streamController].stream;
    }
    debugSetOverrides(opts) {
      let t3, t3$, t3$0, t3$1;
      let createMap = opts && 'createMap' in opts ? opts.createMap : null;
      let markers = opts && 'markers' in opts ? opts.markers : null;
      let circles = opts && 'circles' in opts ? opts.circles : null;
      let polygons = opts && 'polygons' in opts ? opts.polygons : null;
      let polylines = opts && 'polylines' in opts ? opts.polylines : null;
      this[_overrideCreateMap] = createMap;
      this[_markersController] = (t3 = markers, t3 == null ? this[_markersController] : t3);
      this[_circlesController] = (t3$ = circles, t3$ == null ? this[_circlesController] : t3$);
      this[_polygonsController] = (t3$0 = polygons, t3$0 == null ? this[_polygonsController] : t3$0);
      this[_polylinesController] = (t3$1 = polylines, t3$1 == null ? this[_polylinesController] : t3$1);
    }
    [_createMap](div, options) {
      if (this[_overrideCreateMap] != null) {
        return dart.nullCheck(this[_overrideCreateMap])(div, options);
      }
      return new dart.global.google.maps.Map(div, options);
    }
    get isInitialized() {
      return this[_googleMap] != null;
    }
    init() {
      let options = google_maps_flutter_web._rawOptionsToGmapsOptions(this[_rawMapOptions]);
      options = google_maps_flutter_web._applyInitialPosition(this[_initialCameraPosition], options);
      let map = this[_createMap](this[_div], options);
      this[_googleMap] = map;
      this[_attachMapEvents](map);
      this[_attachGeometryControllers](map);
      this[_renderInitialGeometry]({markers: this[_markers], circles: this[_circles], polygons: this[_polygons], polylines: this[_polylines]});
      this[_setTrafficLayer](map, google_maps_flutter_web._isTrafficLayerEnabled(this[_rawMapOptions]));
    }
    [_attachMapEvents](map) {
      google_maps_core$46js$46g['GMap$Ext|get#onTilesloaded'](map).first.then(core.Null, dart.fn(event => {
        this[_streamController].add(new google_maps_flutter_web.WebMapReadyEvent.new(this[_mapId]));
      }, T.voidToNull()));
      google_maps_core$46js$46g['GMap$Ext|get#onClick'](map).listen(dart.fn(event => {
        if (!(event.latLng != null)) dart.assertFailed(null, I[3], 193, 14, "event.latLng != null");
        this[_streamController].add(new map_event.MapTapEvent.new(this[_mapId], google_maps_flutter_web._gmLatLngToLatLng(dart.nullCheck(event.latLng))));
      }, T.IconMouseEventTovoid()));
      google_maps_core$46js$46g['GMap$Ext|get#onRightclick'](map).listen(dart.fn(event => {
        if (!(event.latLng != null)) dart.assertFailed(null, I[3], 199, 14, "event.latLng != null");
        this[_streamController].add(new map_event.MapLongPressEvent.new(this[_mapId], google_maps_flutter_web._gmLatLngToLatLng(dart.nullCheck(event.latLng))));
      }, T.MapMouseEventTovoid()));
      google_maps_core$46js$46g['GMap$Ext|get#onBoundsChanged'](map).listen(dart.fn(event => {
        if (!this[_mapIsMoving]) {
          this[_mapIsMoving] = true;
          this[_streamController].add(new map_event.CameraMoveStartedEvent.new(this[_mapId]));
        }
        this[_streamController].add(new map_event.CameraMoveEvent.new(this[_mapId], google_maps_flutter_web._gmViewportToCameraPosition(map)));
      }, T.voidTovoid()));
      google_maps_core$46js$46g['GMap$Ext|get#onIdle'](map).listen(dart.fn(event => {
        this[_mapIsMoving] = false;
        this[_streamController].add(new map_event.CameraIdleEvent.new(this[_mapId]));
      }, T.voidTovoid()));
    }
    [_attachGeometryControllers](map) {
      if (!(this[_circlesController] != null)) dart.assertFailed("Cannot attach a map to a null CirclesController instance.", I[3], 227, 12, "_circlesController != null");
      if (!(this[_polygonsController] != null)) dart.assertFailed("Cannot attach a map to a null PolygonsController instance.", I[3], 229, 12, "_polygonsController != null");
      if (!(this[_polylinesController] != null)) dart.assertFailed("Cannot attach a map to a null PolylinesController instance.", I[3], 231, 12, "_polylinesController != null");
      if (!(this[_markersController] != null)) dart.assertFailed("Cannot attach a map to a null MarkersController instance.", I[3], 233, 12, "_markersController != null");
      dart.nullCheck(this[_circlesController]).bindToMap(this[_mapId], map);
      dart.nullCheck(this[_polygonsController]).bindToMap(this[_mapId], map);
      dart.nullCheck(this[_polylinesController]).bindToMap(this[_mapId], map);
      dart.nullCheck(this[_markersController]).bindToMap(this[_mapId], map);
      this[_controllersBoundToMap] = true;
    }
    [_renderInitialGeometry](opts) {
      let markers = opts && 'markers' in opts ? opts.markers : C[0] || CT.C0;
      let circles = opts && 'circles' in opts ? opts.circles : C[3] || CT.C3;
      let polygons = opts && 'polygons' in opts ? opts.polygons : C[1] || CT.C1;
      let polylines = opts && 'polylines' in opts ? opts.polylines : C[2] || CT.C2;
      if (!this[_controllersBoundToMap]) dart.assertFailed("Geometry controllers must be bound to a map before any geometry can " + "be added to them. Ensure _attachGeometryControllers is called first.", I[3], 252, 9, "_controllersBoundToMap");
      dart.nullCheck(this[_markersController]).addMarkers(markers);
      dart.nullCheck(this[_circlesController]).addCircles(circles);
      dart.nullCheck(this[_polygonsController]).addPolygons(polygons);
      dart.nullCheck(this[_polylinesController]).addPolylines(polylines);
    }
    [_mergeRawOptions](newOptions) {
      this[_rawMapOptions] = (() => {
        let t3 = new (T.IdentityMapOfString$dynamic()).new();
        for (let t4 of this[_rawMapOptions][$entries])
          t3[$_set](t4.key, t4.value);
        for (let t5 of newOptions[$entries])
          t3[$_set](t5.key, t5.value);
        return t3;
      })();
      return this[_rawMapOptions];
    }
    updateRawOptions(optionsUpdate) {
      if (!(this[_googleMap] != null)) dart.assertFailed("Cannot update options on a null map.", I[3], 281, 12, "_googleMap != null");
      let newOptions = this[_mergeRawOptions](optionsUpdate);
      this[_setOptions](google_maps_flutter_web._rawOptionsToGmapsOptions(newOptions));
      this[_setTrafficLayer](dart.nullCheck(this[_googleMap]), google_maps_flutter_web._isTrafficLayerEnabled(newOptions));
    }
    [_setOptions](options) {
      let t6;
      t6 = this[_googleMap];
      t6 == null ? null : google_maps_core$46js$46g['GMap$Ext|set#options'](t6, options);
    }
    [_setTrafficLayer](map, attach) {
      let t6;
      if (attach && this[_trafficLayer] == null) {
        this[_trafficLayer] = (t6 = new dart.global.google.maps.TrafficLayer(), (() => {
          t6.set("map", map);
          return t6;
        })());
      }
      if (!attach && this[_trafficLayer] != null) {
        dart.nullCheck(this[_trafficLayer]).set("map", null);
        this[_trafficLayer] = null;
      }
    }
    getVisibleRegion() {
      return async.async(location.LatLngBounds, (function* getVisibleRegion() {
        let t6;
        if (!(this[_googleMap] != null)) dart.assertFailed("Cannot get the visible region of a null map.", I[3], 310, 12, "_googleMap != null");
        return google_maps_flutter_web._gmLatLngBoundsTolatLngBounds((t6 = (yield google_maps_core$46js$46g['GMap$Ext|get#bounds'](dart.nullCheck(this[_googleMap]))), t6 == null ? google_maps_flutter_web._nullGmapsLatLngBounds : t6));
      }).bind(this));
    }
    getScreenCoordinate(latLng) {
      return async.async(screen_coordinate.ScreenCoordinate, (function* getScreenCoordinate() {
        if (!(this[_googleMap] != null)) dart.assertFailed("Cannot get the screen coordinates with a null map.", I[3], 319, 12, "_googleMap != null");
        let point = to_screen_location.toScreenLocation(dart.nullCheck(this[_googleMap]), google_maps_flutter_web._latLngToGmLatLng(latLng));
        return new screen_coordinate.ScreenCoordinate.new({x: dart.nullCheck(point.x)[$toInt](), y: dart.nullCheck(point.y)[$toInt]()});
      }).bind(this));
    }
    getLatLng(screenCoordinate) {
      return async.async(location.LatLng, (function* getLatLng() {
        if (!(this[_googleMap] != null)) dart.assertFailed("Cannot get the lat, lng of a screen coordinate with a null map.", I[3], 329, 12, "_googleMap != null");
        let latLng = google_maps_flutter_web._pixelToLatLng(dart.nullCheck(this[_googleMap]), screenCoordinate.x, screenCoordinate.y);
        return google_maps_flutter_web._gmLatLngToLatLng(latLng);
      }).bind(this));
    }
    moveCamera(cameraUpdate) {
      return async.async(dart.void, (function* moveCamera() {
        if (!(this[_googleMap] != null)) dart.assertFailed("Cannot update the camera of a null map.", I[3], 339, 12, "_googleMap != null");
        return google_maps_flutter_web._applyCameraUpdate(dart.nullCheck(this[_googleMap]), cameraUpdate);
      }).bind(this));
    }
    getZoomLevel() {
      return async.async(core.double, (function* getZoomLevel() {
        if (!(this[_googleMap] != null)) dart.assertFailed("Cannot get zoom level of a null map.", I[3], 346, 12, "_googleMap != null");
        if (!(google_maps_core$46js$46g['GMap$Ext|get#zoom'](dart.nullCheck(this[_googleMap])) != null)) dart.assertFailed("Zoom level should not be null. Is the map correctly initialized?", I[3], 347, 12, "_googleMap!.zoom != null");
        return dart.nullCheck(google_maps_core$46js$46g['GMap$Ext|get#zoom'](dart.nullCheck(this[_googleMap])))[$toDouble]();
      }).bind(this));
    }
    updateCircles(updates) {
      let t6, t6$, t6$0;
      if (!(this[_circlesController] != null)) dart.assertFailed("Cannot update circles after dispose().", I[3], 358, 9, "_circlesController != null");
      t6 = this[_circlesController];
      t6 == null ? null : t6.addCircles(updates.circlesToAdd);
      t6$ = this[_circlesController];
      t6$ == null ? null : t6$.changeCircles(updates.circlesToChange);
      t6$0 = this[_circlesController];
      t6$0 == null ? null : t6$0.removeCircles(updates.circleIdsToRemove);
    }
    updatePolygons(updates) {
      let t6, t6$, t6$0;
      if (!(this[_polygonsController] != null)) dart.assertFailed("Cannot update polygons after dispose().", I[3], 367, 9, "_polygonsController != null");
      t6 = this[_polygonsController];
      t6 == null ? null : t6.addPolygons(updates.polygonsToAdd);
      t6$ = this[_polygonsController];
      t6$ == null ? null : t6$.changePolygons(updates.polygonsToChange);
      t6$0 = this[_polygonsController];
      t6$0 == null ? null : t6$0.removePolygons(updates.polygonIdsToRemove);
    }
    updatePolylines(updates) {
      let t6, t6$, t6$0;
      if (!(this[_polylinesController] != null)) dart.assertFailed("Cannot update polylines after dispose().", I[3], 375, 12, "_polylinesController != null");
      t6 = this[_polylinesController];
      t6 == null ? null : t6.addPolylines(updates.polylinesToAdd);
      t6$ = this[_polylinesController];
      t6$ == null ? null : t6$.changePolylines(updates.polylinesToChange);
      t6$0 = this[_polylinesController];
      t6$0 == null ? null : t6$0.removePolylines(updates.polylineIdsToRemove);
    }
    updateMarkers(updates) {
      let t6, t6$, t6$0;
      if (!(this[_markersController] != null)) dart.assertFailed("Cannot update markers after dispose().", I[3], 385, 9, "_markersController != null");
      t6 = this[_markersController];
      t6 == null ? null : t6.addMarkers(updates.markersToAdd);
      t6$ = this[_markersController];
      t6$ == null ? null : t6$.changeMarkers(updates.markersToChange);
      t6$0 = this[_markersController];
      t6$0 == null ? null : t6$0.removeMarkers(updates.markerIdsToRemove);
    }
    showInfoWindow(markerId) {
      let t6;
      if (!(this[_markersController] != null)) dart.assertFailed("Cannot show infowindow of marker [" + markerId.value + "] after dispose().", I[3], 393, 12, "_markersController != null");
      t6 = this[_markersController];
      t6 == null ? null : t6.showMarkerInfoWindow(markerId);
    }
    hideInfoWindow(markerId) {
      let t6;
      if (!(this[_markersController] != null)) dart.assertFailed("Cannot hide infowindow of marker [" + markerId.value + "] after dispose().", I[3], 400, 12, "_markersController != null");
      t6 = this[_markersController];
      t6 == null ? null : t6.hideMarkerInfoWindow(markerId);
    }
    isInfoWindowShown(markerId) {
      let t6, t6$;
      t6$ = (t6 = this[_markersController], t6 == null ? null : t6.isInfoWindowShown(markerId));
      return t6$ == null ? false : t6$;
    }
    dispose() {
      this[_widget] = null;
      this[_googleMap] = null;
      this[_circlesController] = null;
      this[_polygonsController] = null;
      this[_polylinesController] = null;
      this[_markersController] = null;
      this[_streamController].close();
    }
  };
  (google_maps_flutter_web.GoogleMapController.new = function(opts) {
    let t2;
    let mapId = opts && 'mapId' in opts ? opts.mapId : null;
    let streamController = opts && 'streamController' in opts ? opts.streamController : null;
    let initialCameraPosition = opts && 'initialCameraPosition' in opts ? opts.initialCameraPosition : null;
    let markers = opts && 'markers' in opts ? opts.markers : C[0] || CT.C0;
    let polygons = opts && 'polygons' in opts ? opts.polygons : C[1] || CT.C1;
    let polylines = opts && 'polylines' in opts ? opts.polylines : C[2] || CT.C2;
    let circles = opts && 'circles' in opts ? opts.circles : C[3] || CT.C3;
    let tileOverlays = opts && 'tileOverlays' in opts ? opts.tileOverlays : C[4] || CT.C4;
    let gestureRecognizers = opts && 'gestureRecognizers' in opts ? opts.gestureRecognizers : C[5] || CT.C5;
    let mapOptions = opts && 'mapOptions' in opts ? opts.mapOptions : C[6] || CT.C6;
    this[_rawMapOptions] = new (T.IdentityMapOfString$dynamic()).new();
    this[_widget] = null;
    this[__GoogleMapController__div] = null;
    this[_trafficLayer] = null;
    this[_googleMap] = null;
    this[_circlesController] = null;
    this[_polygonsController] = null;
    this[_polylinesController] = null;
    this[_markersController] = null;
    this[_controllersBoundToMap] = false;
    this[_mapIsMoving] = false;
    this[_overrideCreateMap] = null;
    this[_mapId] = mapId;
    this[_streamController] = streamController;
    this[_initialCameraPosition] = initialCameraPosition;
    this[_markers] = markers;
    this[_polygons] = polygons;
    this[_polylines] = polylines;
    this[_circles] = circles;
    this[_rawMapOptions] = mapOptions;
    this[_circlesController] = new google_maps_flutter_web.CirclesController.new({stream: this[_streamController]});
    this[_polygonsController] = new google_maps_flutter_web.PolygonsController.new({stream: this[_streamController]});
    this[_polylinesController] = new google_maps_flutter_web.PolylinesController.new({stream: this[_streamController]});
    this[_markersController] = new google_maps_flutter_web.MarkersController.new({stream: this[_streamController]});
    this[_div] = (t2 = html.DivElement.new(), (() => {
      t2[$id] = this[_getViewType](mapId);
      t2[$style][$width] = "100%";
      t2[$style][$height] = "100%";
      return t2;
    })());
    ui.platformViewRegistry.registerViewFactory(this[_getViewType](mapId), dart.fn(viewId => this[_div], T.intToHtmlElement()));
  }).prototype = google_maps_flutter_web.GoogleMapController.prototype;
  dart.addTypeTests(google_maps_flutter_web.GoogleMapController);
  dart.addTypeCaches(google_maps_flutter_web.GoogleMapController);
  dart.setMethodSignature(google_maps_flutter_web.GoogleMapController, () => ({
    __proto__: dart.getMethods(google_maps_flutter_web.GoogleMapController.__proto__),
    [_getViewType]: dart.fnType(core.String, [core.int]),
    debugSetOverrides: dart.fnType(dart.void, [], {circles: dart.nullable(google_maps_flutter_web.CirclesController), createMap: dart.nullable(dart.fnType(dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map"), [html.HtmlElement, dart.anonymousJSType("MapOptions")])), markers: dart.nullable(google_maps_flutter_web.MarkersController), polygons: dart.nullable(google_maps_flutter_web.PolygonsController), polylines: dart.nullable(google_maps_flutter_web.PolylinesController)}, {}),
    [_createMap]: dart.fnType(dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map"), [html.HtmlElement, dart.anonymousJSType("MapOptions")]),
    init: dart.fnType(dart.void, []),
    [_attachMapEvents]: dart.fnType(dart.void, [dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map")]),
    [_attachGeometryControllers]: dart.fnType(dart.void, [dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map")]),
    [_renderInitialGeometry]: dart.fnType(dart.void, [], {circles: core.Set$(circle.Circle), markers: core.Set$(marker.Marker), polygons: core.Set$(polygon.Polygon), polylines: core.Set$(polyline.Polyline)}, {}),
    [_mergeRawOptions]: dart.fnType(core.Map$(core.String, dart.dynamic), [core.Map$(core.String, dart.dynamic)]),
    updateRawOptions: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_setOptions]: dart.fnType(dart.void, [dart.anonymousJSType("MapOptions")]),
    [_setTrafficLayer]: dart.fnType(dart.void, [dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map"), core.bool]),
    getVisibleRegion: dart.fnType(async.Future$(location.LatLngBounds), []),
    getScreenCoordinate: dart.fnType(async.Future$(screen_coordinate.ScreenCoordinate), [location.LatLng]),
    getLatLng: dart.fnType(async.Future$(location.LatLng), [screen_coordinate.ScreenCoordinate]),
    moveCamera: dart.fnType(async.Future$(dart.void), [camera.CameraUpdate]),
    getZoomLevel: dart.fnType(async.Future$(core.double), []),
    updateCircles: dart.fnType(dart.void, [circle_updates.CircleUpdates]),
    updatePolygons: dart.fnType(dart.void, [polygon_updates.PolygonUpdates]),
    updatePolylines: dart.fnType(dart.void, [polyline_updates.PolylineUpdates]),
    updateMarkers: dart.fnType(dart.void, [marker_updates.MarkerUpdates]),
    showInfoWindow: dart.fnType(dart.void, [marker.MarkerId]),
    hideInfoWindow: dart.fnType(dart.void, [marker.MarkerId]),
    isInfoWindowShown: dart.fnType(core.bool, [marker.MarkerId]),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(google_maps_flutter_web.GoogleMapController, () => ({
    __proto__: dart.getGetters(google_maps_flutter_web.GoogleMapController.__proto__),
    [_div]: html.HtmlElement,
    widget: dart.nullable(framework.Widget),
    trafficLayer: dart.nullable(dart.lazyJSType(() => dart.global.google.maps.TrafficLayer, "google.maps.TrafficLayer")),
    stream: async.StreamController$(map_event.MapEvent),
    events: async.Stream$(map_event.MapEvent),
    isInitialized: core.bool
  }));
  dart.setSetterSignature(google_maps_flutter_web.GoogleMapController, () => ({
    __proto__: dart.getSetters(google_maps_flutter_web.GoogleMapController.__proto__),
    [_div]: html.HtmlElement
  }));
  dart.setLibraryUri(google_maps_flutter_web.GoogleMapController, I[2]);
  dart.setFieldSignature(google_maps_flutter_web.GoogleMapController, () => ({
    __proto__: dart.getFields(google_maps_flutter_web.GoogleMapController.__proto__),
    [_mapId]: dart.finalFieldType(core.int),
    [_initialCameraPosition]: dart.finalFieldType(camera.CameraPosition),
    [_markers]: dart.finalFieldType(core.Set$(marker.Marker)),
    [_polygons]: dart.finalFieldType(core.Set$(polygon.Polygon)),
    [_polylines]: dart.finalFieldType(core.Set$(polyline.Polyline)),
    [_circles]: dart.finalFieldType(core.Set$(circle.Circle)),
    [_rawMapOptions]: dart.fieldType(core.Map$(core.String, dart.dynamic)),
    [_widget]: dart.fieldType(dart.nullable(platform_view.HtmlElementView)),
    [__GoogleMapController__div]: dart.fieldType(dart.nullable(html.HtmlElement)),
    [_trafficLayer]: dart.fieldType(dart.nullable(dart.lazyJSType(() => dart.global.google.maps.TrafficLayer, "google.maps.TrafficLayer"))),
    [_googleMap]: dart.fieldType(dart.nullable(dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map"))),
    [_streamController]: dart.finalFieldType(async.StreamController$(map_event.MapEvent)),
    [_circlesController]: dart.fieldType(dart.nullable(google_maps_flutter_web.CirclesController)),
    [_polygonsController]: dart.fieldType(dart.nullable(google_maps_flutter_web.PolygonsController)),
    [_polylinesController]: dart.fieldType(dart.nullable(google_maps_flutter_web.PolylinesController)),
    [_markersController]: dart.fieldType(dart.nullable(google_maps_flutter_web.MarkersController)),
    [_controllersBoundToMap]: dart.fieldType(core.bool),
    [_mapIsMoving]: dart.fieldType(core.bool),
    [_overrideCreateMap]: dart.fieldType(dart.nullable(dart.fnType(dart.lazyJSType(() => dart.global.google.maps.Map, "google.maps.Map"), [html.HtmlElement, dart.anonymousJSType("MapOptions")])))
  }));
  google_maps_flutter_web.WebMapReadyEvent = class WebMapReadyEvent extends map_event.MapEvent$(dart.void) {};
  (google_maps_flutter_web.WebMapReadyEvent.new = function(mapId) {
    google_maps_flutter_web.WebMapReadyEvent.__proto__.new.call(this, mapId, null);
    ;
  }).prototype = google_maps_flutter_web.WebMapReadyEvent.prototype;
  dart.addTypeTests(google_maps_flutter_web.WebMapReadyEvent);
  dart.addTypeCaches(google_maps_flutter_web.WebMapReadyEvent);
  dart.setLibraryUri(google_maps_flutter_web.WebMapReadyEvent, I[2]);
  var _circle = dart.privateName(google_maps_flutter_web, "_circle");
  var _consumeTapEvents = dart.privateName(google_maps_flutter_web, "_consumeTapEvents");
  google_maps_flutter_web.CircleController = class CircleController extends core.Object {
    get circle() {
      return this[_circle];
    }
    get consumeTapEvents() {
      return this[_consumeTapEvents];
    }
    update(options) {
      if (!(this[_circle] != null)) dart.assertFailed("Cannot `update` Circle after calling `remove`.", I[4], 38, 12, "_circle != null");
      google_maps_core$46js$46g['Circle$Ext|set#options'](dart.nullCheck(this[_circle]), options);
    }
    remove() {
      if (this[_circle] != null) {
        google_maps_core$46js$46g['Circle$Ext|set#visible'](dart.nullCheck(this[_circle]), false);
        google_maps_core$46js$46g['Circle$Ext|set#radius'](dart.nullCheck(this[_circle]), 0);
        google_maps_core$46js$46g['Circle$Ext|set#map'](dart.nullCheck(this[_circle]), null);
        this[_circle] = null;
      }
    }
  };
  (google_maps_flutter_web.CircleController.new = function(opts) {
    let circle = opts && 'circle' in opts ? opts.circle : null;
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[_circle] = circle;
    this[_consumeTapEvents] = consumeTapEvents;
    if (onTap != null) {
      google_maps_core$46js$46g['Circle$Ext|get#onClick'](circle).listen(dart.fn(_ => {
        onTap();
      }, T.MapMouseEventTovoid()));
    }
  }).prototype = google_maps_flutter_web.CircleController.prototype;
  dart.addTypeTests(google_maps_flutter_web.CircleController);
  dart.addTypeCaches(google_maps_flutter_web.CircleController);
  dart.setMethodSignature(google_maps_flutter_web.CircleController, () => ({
    __proto__: dart.getMethods(google_maps_flutter_web.CircleController.__proto__),
    update: dart.fnType(dart.void, [dart.anonymousJSType("CircleOptions")]),
    remove: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(google_maps_flutter_web.CircleController, () => ({
    __proto__: dart.getGetters(google_maps_flutter_web.CircleController.__proto__),
    circle: dart.nullable(dart.lazyJSType(() => dart.global.google.maps.Circle, "google.maps.Circle")),
    consumeTapEvents: core.bool
  }));
  dart.setLibraryUri(google_maps_flutter_web.CircleController, I[2]);
  dart.setFieldSignature(google_maps_flutter_web.CircleController, () => ({
    __proto__: dart.getFields(google_maps_flutter_web.CircleController.__proto__),
    [_circle]: dart.fieldType(dart.nullable(dart.lazyJSType(() => dart.global.google.maps.Circle, "google.maps.Circle"))),
    [_consumeTapEvents]: dart.finalFieldType(core.bool)
  }));
  var _circleIdToController = dart.privateName(google_maps_flutter_web, "_circleIdToController");
  var _addCircle = dart.privateName(google_maps_flutter_web, "_addCircle");
  var _onCircleTap = dart.privateName(google_maps_flutter_web, "_onCircleTap");
  var _changeCircle = dart.privateName(google_maps_flutter_web, "_changeCircle");
  google_maps_flutter_web.CirclesController = class CirclesController extends types.GeometryController {
    get circles() {
      return this[_circleIdToController];
    }
    addCircles(circlesToAdd) {
      circlesToAdd[$forEach](dart.fn(circle => {
        this[_addCircle](circle);
      }, T.CircleTovoid()));
    }
    [_addCircle](circle) {
      if (circle === null) {
        return;
      }
      let populationOptions = google_maps_flutter_web._circleOptionsFromCircle(circle);
      let gmCircle = new dart.global.google.maps.Circle(populationOptions);
      google_maps_core$46js$46g['Circle$Ext|set#map'](gmCircle, this.googleMap);
      let controller = new google_maps_flutter_web.CircleController.new({circle: gmCircle, consumeTapEvents: circle.consumeTapEvents, onTap: dart.fn(() => {
          this[_onCircleTap](circle.circleId);
        }, T.VoidTovoid())});
      this[_circleIdToController][$_set](circle.circleId, controller);
    }
    changeCircles(circlesToChange) {
      circlesToChange[$forEach](dart.fn(circleToChange => {
        this[_changeCircle](circleToChange);
      }, T.CircleTovoid()));
    }
    [_changeCircle](circle) {
      let t6;
      let circleController = this[_circleIdToController][$_get](circle.circleId);
      t6 = circleController;
      t6 == null ? null : t6.update(google_maps_flutter_web._circleOptionsFromCircle(circle));
    }
    removeCircles(circleIdsToRemove) {
      circleIdsToRemove[$forEach](dart.fn(circleId => {
        let t6;
        let circleController = this[_circleIdToController][$_get](circleId);
        t6 = circleController;
        t6 == null ? null : t6.remove();
        this[_circleIdToController][$remove](circleId);
      }, T.CircleIdTovoid()));
    }
    [_onCircleTap](circleId) {
      let t6, t6$;
      this[_streamController].add(new map_event.CircleTapEvent.new(this.mapId, circleId));
      t6$ = (t6 = this[_circleIdToController][$_get](circleId), t6 == null ? null : t6.consumeTapEvents);
      return t6$ == null ? false : t6$;
    }
  };
  (google_maps_flutter_web.CirclesController.new = function(opts) {
    let stream = opts && 'stream' in opts ? opts.stream : null;
    this[_streamController] = stream;
    this[_circleIdToController] = new (T.LinkedMapOfCircleId$CircleController()).new();
    google_maps_flutter_web.CirclesController.__proto__.new.call(this);
    ;
  }).prototype = google_maps_flutter_web.CirclesController.prototype;
  dart.addTypeTests(google_maps_flutter_web.CirclesController);
  dart.addTypeCaches(google_maps_flutter_web.CirclesController);
  dart.setMethodSignature(google_maps_flutter_web.CirclesController, () => ({
    __proto__: dart.getMethods(google_maps_flutter_web.CirclesController.__proto__),
    addCircles: dart.fnType(dart.void, [core.Set$(circle.Circle)]),
    [_addCircle]: dart.fnType(dart.void, [circle.Circle]),
    changeCircles: dart.fnType(dart.void, [core.Set$(circle.Circle)]),
    [_changeCircle]: dart.fnType(dart.void, [circle.Circle]),
    removeCircles: dart.fnType(dart.void, [core.Set$(circle.CircleId)]),
    [_onCircleTap]: dart.fnType(core.bool, [circle.CircleId])
  }));
  dart.setGetterSignature(google_maps_flutter_web.CirclesController, () => ({
    __proto__: dart.getGetters(google_maps_flutter_web.CirclesController.__proto__),
    circles: core.Map$(circle.CircleId, google_maps_flutter_web.CircleController)
  }));
  dart.setLibraryUri(google_maps_flutter_web.CirclesController, I[2]);
  dart.setFieldSignature(google_maps_flutter_web.CirclesController, () => ({
    __proto__: dart.getFields(google_maps_flutter_web.CirclesController.__proto__),
    [_circleIdToController]: dart.finalFieldType(core.Map$(circle.CircleId, google_maps_flutter_web.CircleController)),
    [_streamController]: dart.fieldType(async.StreamController$(map_event.MapEvent))
  }));
  var _polygon = dart.privateName(google_maps_flutter_web, "_polygon");
  google_maps_flutter_web.PolygonController = class PolygonController extends core.Object {
    get polygon() {
      return this[_polygon];
    }
    get consumeTapEvents() {
      return this[_consumeTapEvents];
    }
    update(options) {
      if (!(this[_polygon] != null)) dart.assertFailed("Cannot `update` Polygon after calling `remove`.", I[5], 38, 12, "_polygon != null");
      google_maps_core$46js$46g['Polygon$Ext|set#options'](dart.nullCheck(this[_polygon]), options);
    }
    remove() {
      if (this[_polygon] != null) {
        google_maps_core$46js$46g['Polygon$Ext|set#visible'](dart.nullCheck(this[_polygon]), false);
        google_maps_core$46js$46g['Polygon$Ext|set#map'](dart.nullCheck(this[_polygon]), null);
        this[_polygon] = null;
      }
    }
  };
  (google_maps_flutter_web.PolygonController.new = function(opts) {
    let polygon = opts && 'polygon' in opts ? opts.polygon : null;
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[_polygon] = polygon;
    this[_consumeTapEvents] = consumeTapEvents;
    if (onTap != null) {
      google_maps_core$46js$46g['Polygon$Ext|get#onClick'](polygon).listen(dart.fn(event => {
        onTap();
      }, T.PolyMouseEventTovoid()));
    }
  }).prototype = google_maps_flutter_web.PolygonController.prototype;
  dart.addTypeTests(google_maps_flutter_web.PolygonController);
  dart.addTypeCaches(google_maps_flutter_web.PolygonController);
  dart.setMethodSignature(google_maps_flutter_web.PolygonController, () => ({
    __proto__: dart.getMethods(google_maps_flutter_web.PolygonController.__proto__),
    update: dart.fnType(dart.void, [dart.anonymousJSType("PolygonOptions")]),
    remove: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(google_maps_flutter_web.PolygonController, () => ({
    __proto__: dart.getGetters(google_maps_flutter_web.PolygonController.__proto__),
    polygon: dart.nullable(dart.lazyJSType(() => dart.global.google.maps.Polygon, "google.maps.Polygon")),
    consumeTapEvents: core.bool
  }));
  dart.setLibraryUri(google_maps_flutter_web.PolygonController, I[2]);
  dart.setFieldSignature(google_maps_flutter_web.PolygonController, () => ({
    __proto__: dart.getFields(google_maps_flutter_web.PolygonController.__proto__),
    [_polygon]: dart.fieldType(dart.nullable(dart.lazyJSType(() => dart.global.google.maps.Polygon, "google.maps.Polygon"))),
    [_consumeTapEvents]: dart.finalFieldType(core.bool)
  }));
  var _polygonIdToController = dart.privateName(google_maps_flutter_web, "_polygonIdToController");
  var _addPolygon = dart.privateName(google_maps_flutter_web, "_addPolygon");
  var _onPolygonTap = dart.privateName(google_maps_flutter_web, "_onPolygonTap");
  var _changePolygon = dart.privateName(google_maps_flutter_web, "_changePolygon");
  google_maps_flutter_web.PolygonsController = class PolygonsController extends types.GeometryController {
    get polygons() {
      return this[_polygonIdToController];
    }
    addPolygons(polygonsToAdd) {
      if (polygonsToAdd !== null) {
        polygonsToAdd[$forEach](dart.fn(polygon => {
          this[_addPolygon](polygon);
        }, T.PolygonTovoid()));
      }
    }
    [_addPolygon](polygon) {
      if (polygon === null) {
        return;
      }
      let populationOptions = google_maps_flutter_web._polygonOptionsFromPolygon(this.googleMap, polygon);
      let gmPolygon = new dart.global.google.maps.Polygon(populationOptions);
      google_maps_core$46js$46g['Polygon$Ext|set#map'](gmPolygon, this.googleMap);
      let controller = new google_maps_flutter_web.PolygonController.new({polygon: gmPolygon, consumeTapEvents: polygon.consumeTapEvents, onTap: dart.fn(() => {
          this[_onPolygonTap](polygon.polygonId);
        }, T.VoidTovoid())});
      this[_polygonIdToController][$_set](polygon.polygonId, controller);
    }
    changePolygons(polygonsToChange) {
      if (polygonsToChange !== null) {
        polygonsToChange[$forEach](dart.fn(polygonToChange => {
          this[_changePolygon](polygonToChange);
        }, T.PolygonTovoid()));
      }
    }
    [_changePolygon](polygon) {
      let t6;
      let polygonController = this[_polygonIdToController][$_get](polygon.polygonId);
      t6 = polygonController;
      t6 == null ? null : t6.update(google_maps_flutter_web._polygonOptionsFromPolygon(this.googleMap, polygon));
    }
    removePolygons(polygonIdsToRemove) {
      polygonIdsToRemove[$forEach](dart.fn(polygonId => {
        let t6;
        let polygonController = this[_polygonIdToController][$_get](polygonId);
        t6 = polygonController;
        t6 == null ? null : t6.remove();
        this[_polygonIdToController][$remove](polygonId);
      }, T.PolygonIdTovoid()));
    }
    [_onPolygonTap](polygonId) {
      let t6, t6$;
      this[_streamController].add(new map_event.PolygonTapEvent.new(this.mapId, polygonId));
      t6$ = (t6 = this[_polygonIdToController][$_get](polygonId), t6 == null ? null : t6.consumeTapEvents);
      return t6$ == null ? false : t6$;
    }
  };
  (google_maps_flutter_web.PolygonsController.new = function(opts) {
    let stream = opts && 'stream' in opts ? opts.stream : null;
    this[_streamController] = stream;
    this[_polygonIdToController] = new (T.LinkedMapOfPolygonId$PolygonController()).new();
    google_maps_flutter_web.PolygonsController.__proto__.new.call(this);
    ;
  }).prototype = google_maps_flutter_web.PolygonsController.prototype;
  dart.addTypeTests(google_maps_flutter_web.PolygonsController);
  dart.addTypeCaches(google_maps_flutter_web.PolygonsController);
  dart.setMethodSignature(google_maps_flutter_web.PolygonsController, () => ({
    __proto__: dart.getMethods(google_maps_flutter_web.PolygonsController.__proto__),
    addPolygons: dart.fnType(dart.void, [core.Set$(polygon.Polygon)]),
    [_addPolygon]: dart.fnType(dart.void, [polygon.Polygon]),
    changePolygons: dart.fnType(dart.void, [core.Set$(polygon.Polygon)]),
    [_changePolygon]: dart.fnType(dart.void, [polygon.Polygon]),
    removePolygons: dart.fnType(dart.void, [core.Set$(polygon.PolygonId)]),
    [_onPolygonTap]: dart.fnType(core.bool, [polygon.PolygonId])
  }));
  dart.setGetterSignature(google_maps_flutter_web.PolygonsController, () => ({
    __proto__: dart.getGetters(google_maps_flutter_web.PolygonsController.__proto__),
    polygons: core.Map$(polygon.PolygonId, google_maps_flutter_web.PolygonController)
  }));
  dart.setLibraryUri(google_maps_flutter_web.PolygonsController, I[2]);
  dart.setFieldSignature(google_maps_flutter_web.PolygonsController, () => ({
    __proto__: dart.getFields(google_maps_flutter_web.PolygonsController.__proto__),
    [_polygonIdToController]: dart.finalFieldType(core.Map$(polygon.PolygonId, google_maps_flutter_web.PolygonController)),
    [_streamController]: dart.fieldType(async.StreamController$(map_event.MapEvent))
  }));
  var _polyline = dart.privateName(google_maps_flutter_web, "_polyline");
  google_maps_flutter_web.PolylineController = class PolylineController extends core.Object {
    get line() {
      return this[_polyline];
    }
    get consumeTapEvents() {
      return this[_consumeTapEvents];
    }
    update(options) {
      if (!(this[_polyline] != null)) dart.assertFailed("Cannot `update` Polyline after calling `remove`.", I[6], 39, 9, "_polyline != null");
      google_maps_core$46js$46g['Polyline$Ext|set#options'](dart.nullCheck(this[_polyline]), options);
    }
    remove() {
      if (this[_polyline] != null) {
        google_maps_core$46js$46g['Polyline$Ext|set#visible'](dart.nullCheck(this[_polyline]), false);
        google_maps_core$46js$46g['Polyline$Ext|set#map'](dart.nullCheck(this[_polyline]), null);
        this[_polyline] = null;
      }
    }
  };
  (google_maps_flutter_web.PolylineController.new = function(opts) {
    let polyline = opts && 'polyline' in opts ? opts.polyline : null;
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[_polyline] = polyline;
    this[_consumeTapEvents] = consumeTapEvents;
    if (onTap != null) {
      google_maps_core$46js$46g['Polyline$Ext|get#onClick'](polyline).listen(dart.fn(event => {
        onTap();
      }, T.PolyMouseEventTovoid()));
    }
  }).prototype = google_maps_flutter_web.PolylineController.prototype;
  dart.addTypeTests(google_maps_flutter_web.PolylineController);
  dart.addTypeCaches(google_maps_flutter_web.PolylineController);
  dart.setMethodSignature(google_maps_flutter_web.PolylineController, () => ({
    __proto__: dart.getMethods(google_maps_flutter_web.PolylineController.__proto__),
    update: dart.fnType(dart.void, [dart.anonymousJSType("PolylineOptions")]),
    remove: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(google_maps_flutter_web.PolylineController, () => ({
    __proto__: dart.getGetters(google_maps_flutter_web.PolylineController.__proto__),
    line: dart.nullable(dart.lazyJSType(() => dart.global.google.maps.Polyline, "google.maps.Polyline")),
    consumeTapEvents: core.bool
  }));
  dart.setLibraryUri(google_maps_flutter_web.PolylineController, I[2]);
  dart.setFieldSignature(google_maps_flutter_web.PolylineController, () => ({
    __proto__: dart.getFields(google_maps_flutter_web.PolylineController.__proto__),
    [_polyline]: dart.fieldType(dart.nullable(dart.lazyJSType(() => dart.global.google.maps.Polyline, "google.maps.Polyline"))),
    [_consumeTapEvents]: dart.finalFieldType(core.bool)
  }));
  var _polylineIdToController = dart.privateName(google_maps_flutter_web, "_polylineIdToController");
  var _addPolyline = dart.privateName(google_maps_flutter_web, "_addPolyline");
  var _onPolylineTap = dart.privateName(google_maps_flutter_web, "_onPolylineTap");
  var _changePolyline = dart.privateName(google_maps_flutter_web, "_changePolyline");
  google_maps_flutter_web.PolylinesController = class PolylinesController extends types.GeometryController {
    get lines() {
      return this[_polylineIdToController];
    }
    addPolylines(polylinesToAdd) {
      polylinesToAdd[$forEach](dart.fn(polyline => {
        this[_addPolyline](polyline);
      }, T.PolylineTovoid()));
    }
    [_addPolyline](polyline) {
      if (polyline === null) {
        return;
      }
      let polylineOptions = google_maps_flutter_web._polylineOptionsFromPolyline(this.googleMap, polyline);
      let gmPolyline = new dart.global.google.maps.Polyline(polylineOptions);
      google_maps_core$46js$46g['Polyline$Ext|set#map'](gmPolyline, this.googleMap);
      let controller = new google_maps_flutter_web.PolylineController.new({polyline: gmPolyline, consumeTapEvents: polyline.consumeTapEvents, onTap: dart.fn(() => {
          this[_onPolylineTap](polyline.polylineId);
        }, T.VoidTovoid())});
      this[_polylineIdToController][$_set](polyline.polylineId, controller);
    }
    changePolylines(polylinesToChange) {
      polylinesToChange[$forEach](dart.fn(polylineToChange => {
        this[_changePolyline](polylineToChange);
      }, T.PolylineTovoid()));
    }
    [_changePolyline](polyline) {
      let t6;
      let polylineController = this[_polylineIdToController][$_get](polyline.polylineId);
      t6 = polylineController;
      t6 == null ? null : t6.update(google_maps_flutter_web._polylineOptionsFromPolyline(this.googleMap, polyline));
    }
    removePolylines(polylineIdsToRemove) {
      polylineIdsToRemove[$forEach](dart.fn(polylineId => {
        let t6;
        let polylineController = this[_polylineIdToController][$_get](polylineId);
        t6 = polylineController;
        t6 == null ? null : t6.remove();
        this[_polylineIdToController][$remove](polylineId);
      }, T.PolylineIdTovoid()));
    }
    [_onPolylineTap](polylineId) {
      let t6, t6$;
      this[_streamController].add(new map_event.PolylineTapEvent.new(this.mapId, polylineId));
      t6$ = (t6 = this[_polylineIdToController][$_get](polylineId), t6 == null ? null : t6.consumeTapEvents);
      return t6$ == null ? false : t6$;
    }
  };
  (google_maps_flutter_web.PolylinesController.new = function(opts) {
    let stream = opts && 'stream' in opts ? opts.stream : null;
    this[_streamController] = stream;
    this[_polylineIdToController] = new (T.LinkedMapOfPolylineId$PolylineController()).new();
    google_maps_flutter_web.PolylinesController.__proto__.new.call(this);
    ;
  }).prototype = google_maps_flutter_web.PolylinesController.prototype;
  dart.addTypeTests(google_maps_flutter_web.PolylinesController);
  dart.addTypeCaches(google_maps_flutter_web.PolylinesController);
  dart.setMethodSignature(google_maps_flutter_web.PolylinesController, () => ({
    __proto__: dart.getMethods(google_maps_flutter_web.PolylinesController.__proto__),
    addPolylines: dart.fnType(dart.void, [core.Set$(polyline.Polyline)]),
    [_addPolyline]: dart.fnType(dart.void, [polyline.Polyline]),
    changePolylines: dart.fnType(dart.void, [core.Set$(polyline.Polyline)]),
    [_changePolyline]: dart.fnType(dart.void, [polyline.Polyline]),
    removePolylines: dart.fnType(dart.void, [core.Set$(polyline.PolylineId)]),
    [_onPolylineTap]: dart.fnType(core.bool, [polyline.PolylineId])
  }));
  dart.setGetterSignature(google_maps_flutter_web.PolylinesController, () => ({
    __proto__: dart.getGetters(google_maps_flutter_web.PolylinesController.__proto__),
    lines: core.Map$(polyline.PolylineId, google_maps_flutter_web.PolylineController)
  }));
  dart.setLibraryUri(google_maps_flutter_web.PolylinesController, I[2]);
  dart.setFieldSignature(google_maps_flutter_web.PolylinesController, () => ({
    __proto__: dart.getFields(google_maps_flutter_web.PolylinesController.__proto__),
    [_polylineIdToController]: dart.finalFieldType(core.Map$(polyline.PolylineId, google_maps_flutter_web.PolylineController)),
    [_streamController]: dart.fieldType(async.StreamController$(map_event.MapEvent))
  }));
  var _infoWindowShown = dart.privateName(google_maps_flutter_web, "_infoWindowShown");
  var _marker = dart.privateName(google_maps_flutter_web, "_marker");
  var _infoWindow = dart.privateName(google_maps_flutter_web, "_infoWindow");
  google_maps_flutter_web.MarkerController = class MarkerController extends core.Object {
    get consumeTapEvents() {
      return this[_consumeTapEvents];
    }
    get infoWindowShown() {
      return this[_infoWindowShown];
    }
    get marker() {
      return this[_marker];
    }
    get infoWindow() {
      return this[_infoWindow];
    }
    update(options, opts) {
      let newInfoWindowContent = opts && 'newInfoWindowContent' in opts ? opts.newInfoWindowContent : null;
      if (!(this[_marker] != null)) dart.assertFailed("Cannot `update` Marker after calling `remove`.", I[7], 80, 12, "_marker != null");
      google_maps_core$46js$46g['Marker$Ext|set#options'](dart.nullCheck(this[_marker]), options);
      if (this[_infoWindow] != null && newInfoWindowContent != null) {
        google_maps_core$46js$46g['InfoWindow$Ext|set#content'](dart.nullCheck(this[_infoWindow]), newInfoWindowContent);
      }
    }
    remove() {
      if (this[_marker] != null) {
        this[_infoWindowShown] = false;
        google_maps_core$46js$46g['Marker$Ext|set#visible'](dart.nullCheck(this[_marker]), false);
        google_maps_core$46js$46g['Marker$Ext|set#map'](dart.nullCheck(this[_marker]), null);
        this[_marker] = null;
      }
    }
    hideInfoWindow() {
      if (!(this[_marker] != null)) dart.assertFailed("Cannot `hideInfoWindow` on a `remove`d Marker.", I[7], 101, 12, "_marker != null");
      if (this[_infoWindow] != null) {
        dart.nullCheck(this[_infoWindow]).close();
        this[_infoWindowShown] = false;
      }
    }
    showInfoWindow() {
      if (!(this[_marker] != null)) dart.assertFailed("Cannot `showInfoWindow` on a `remove`d Marker.", I[7], 112, 12, "_marker != null");
      if (this[_infoWindow] != null) {
        dart.nullCheck(this[_infoWindow]).open(google_maps_core$46js$46g['Marker$Ext|get#map'](dart.nullCheck(this[_marker])), this[_marker]);
        this[_infoWindowShown] = true;
      }
    }
  };
  (google_maps_flutter_web.MarkerController.new = function(opts) {
    let marker = opts && 'marker' in opts ? opts.marker : null;
    let infoWindow = opts && 'infoWindow' in opts ? opts.infoWindow : null;
    let consumeTapEvents = opts && 'consumeTapEvents' in opts ? opts.consumeTapEvents : false;
    let onDragStart = opts && 'onDragStart' in opts ? opts.onDragStart : null;
    let onDrag = opts && 'onDrag' in opts ? opts.onDrag : null;
    let onDragEnd = opts && 'onDragEnd' in opts ? opts.onDragEnd : null;
    let onTap = opts && 'onTap' in opts ? opts.onTap : null;
    this[_infoWindowShown] = false;
    this[_marker] = marker;
    this[_infoWindow] = infoWindow;
    this[_consumeTapEvents] = consumeTapEvents;
    if (onTap != null) {
      google_maps_core$46js$46g['Marker$Ext|get#onClick'](marker).listen(dart.fn(event => {
        onTap();
      }, T.MapMouseEventTovoid()));
    }
    if (onDragStart != null) {
      google_maps_core$46js$46g['Marker$Ext|get#onDragstart'](marker).listen(dart.fn(event => {
        let t6;
        if (marker !== null) {
          google_maps_core$46js$46g['Marker$Ext|set#position'](marker, event.latLng);
        }
        onDragStart((t6 = event.latLng, t6 == null ? google_maps_flutter_web._nullGmapsLatLng : t6));
      }, T.MapMouseEventTovoid()));
    }
    if (onDrag != null) {
      google_maps_core$46js$46g['Marker$Ext|get#onDrag'](marker).listen(dart.fn(event => {
        let t6;
        if (marker !== null) {
          google_maps_core$46js$46g['Marker$Ext|set#position'](marker, event.latLng);
        }
        onDrag((t6 = event.latLng, t6 == null ? google_maps_flutter_web._nullGmapsLatLng : t6));
      }, T.MapMouseEventTovoid()));
    }
    if (onDragEnd != null) {
      google_maps_core$46js$46g['Marker$Ext|get#onDragend'](marker).listen(dart.fn(event => {
        let t6;
        if (marker !== null) {
          google_maps_core$46js$46g['Marker$Ext|set#position'](marker, event.latLng);
        }
        onDragEnd((t6 = event.latLng, t6 == null ? google_maps_flutter_web._nullGmapsLatLng : t6));
      }, T.MapMouseEventTovoid()));
    }
  }).prototype = google_maps_flutter_web.MarkerController.prototype;
  dart.addTypeTests(google_maps_flutter_web.MarkerController);
  dart.addTypeCaches(google_maps_flutter_web.MarkerController);
  dart.setMethodSignature(google_maps_flutter_web.MarkerController, () => ({
    __proto__: dart.getMethods(google_maps_flutter_web.MarkerController.__proto__),
    update: dart.fnType(dart.void, [dart.anonymousJSType("MarkerOptions")], {newInfoWindowContent: dart.nullable(html.HtmlElement)}, {}),
    remove: dart.fnType(dart.void, []),
    hideInfoWindow: dart.fnType(dart.void, []),
    showInfoWindow: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(google_maps_flutter_web.MarkerController, () => ({
    __proto__: dart.getGetters(google_maps_flutter_web.MarkerController.__proto__),
    consumeTapEvents: core.bool,
    infoWindowShown: core.bool,
    marker: dart.nullable(dart.lazyJSType(() => dart.global.google.maps.Marker, "google.maps.Marker")),
    infoWindow: dart.nullable(dart.lazyJSType(() => dart.global.google.maps.InfoWindow, "google.maps.InfoWindow"))
  }));
  dart.setLibraryUri(google_maps_flutter_web.MarkerController, I[2]);
  dart.setFieldSignature(google_maps_flutter_web.MarkerController, () => ({
    __proto__: dart.getFields(google_maps_flutter_web.MarkerController.__proto__),
    [_marker]: dart.fieldType(dart.nullable(dart.lazyJSType(() => dart.global.google.maps.Marker, "google.maps.Marker"))),
    [_consumeTapEvents]: dart.finalFieldType(core.bool),
    [_infoWindow]: dart.finalFieldType(dart.nullable(dart.lazyJSType(() => dart.global.google.maps.InfoWindow, "google.maps.InfoWindow"))),
    [_infoWindowShown]: dart.fieldType(core.bool)
  }));
  var _markerIdToController = dart.privateName(google_maps_flutter_web, "_markerIdToController");
  var _addMarker = dart.privateName(google_maps_flutter_web, "_addMarker");
  var _onInfoWindowTap = dart.privateName(google_maps_flutter_web, "_onInfoWindowTap");
  var _onMarkerTap = dart.privateName(google_maps_flutter_web, "_onMarkerTap");
  var _onMarkerDragStart = dart.privateName(google_maps_flutter_web, "_onMarkerDragStart");
  var _onMarkerDrag = dart.privateName(google_maps_flutter_web, "_onMarkerDrag");
  var _onMarkerDragEnd = dart.privateName(google_maps_flutter_web, "_onMarkerDragEnd");
  var _changeMarker = dart.privateName(google_maps_flutter_web, "_changeMarker");
  var _removeMarker = dart.privateName(google_maps_flutter_web, "_removeMarker");
  var _hideAllMarkerInfoWindow = dart.privateName(google_maps_flutter_web, "_hideAllMarkerInfoWindow");
  google_maps_flutter_web.MarkersController = class MarkersController extends types.GeometryController {
    get markers() {
      return this[_markerIdToController];
    }
    addMarkers(markersToAdd) {
      markersToAdd[$forEach](dart.bind(this, _addMarker));
    }
    [_addMarker](marker) {
      let t6;
      if (marker === null) {
        return;
      }
      let infoWindowOptions = google_maps_flutter_web._infoWindowOptionsFromMarker(marker);
      let gmInfoWindow = null;
      if (infoWindowOptions != null) {
        gmInfoWindow = new dart.global.google.maps.InfoWindow(infoWindowOptions);
        if (html.HtmlElement.is(infoWindowOptions.content)) {
          let content = html.HtmlElement.as(infoWindowOptions.content);
          content[$onClick].listen(dart.fn(_ => {
            this[_onInfoWindowTap](marker.markerId);
          }, T.MouseEventTovoid()));
        }
      }
      let currentMarker = (t6 = this[_markerIdToController][$_get](marker.markerId), t6 == null ? null : t6.marker);
      let populationOptions = google_maps_flutter_web._markerOptionsFromMarker(marker, currentMarker);
      let gmMarker = new dart.global.google.maps.Marker(populationOptions);
      google_maps_core$46js$46g['Marker$Ext|set#map'](gmMarker, this.googleMap);
      let controller = new google_maps_flutter_web.MarkerController.new({marker: gmMarker, infoWindow: gmInfoWindow, consumeTapEvents: marker.consumeTapEvents, onTap: dart.fn(() => {
          this.showMarkerInfoWindow(marker.markerId);
          this[_onMarkerTap](marker.markerId);
        }, T.VoidTovoid()), onDragStart: dart.fn(latLng => {
          this[_onMarkerDragStart](marker.markerId, latLng);
        }, T.LatLngTovoid()), onDrag: dart.fn(latLng => {
          this[_onMarkerDrag](marker.markerId, latLng);
        }, T.LatLngTovoid()), onDragEnd: dart.fn(latLng => {
          this[_onMarkerDragEnd](marker.markerId, latLng);
        }, T.LatLngTovoid())});
      this[_markerIdToController][$_set](marker.markerId, controller);
    }
    changeMarkers(markersToChange) {
      markersToChange[$forEach](dart.bind(this, _changeMarker));
    }
    [_changeMarker](marker) {
      let t6;
      let markerController = this[_markerIdToController][$_get](marker.markerId);
      if (markerController != null) {
        let markerOptions = google_maps_flutter_web._markerOptionsFromMarker(marker, markerController.marker);
        let infoWindow = google_maps_flutter_web._infoWindowOptionsFromMarker(marker);
        markerController.update(markerOptions, {newInfoWindowContent: T.HtmlElementN().as((t6 = infoWindow, t6 == null ? null : t6.content))});
      }
    }
    removeMarkers(markerIdsToRemove) {
      markerIdsToRemove[$forEach](dart.bind(this, _removeMarker));
    }
    [_removeMarker](markerId) {
      let t6;
      let markerController = this[_markerIdToController][$_get](markerId);
      t6 = markerController;
      t6 == null ? null : t6.remove();
      this[_markerIdToController][$remove](markerId);
    }
    showMarkerInfoWindow(markerId) {
      let t6;
      this[_hideAllMarkerInfoWindow]();
      let markerController = this[_markerIdToController][$_get](markerId);
      t6 = markerController;
      t6 == null ? null : t6.showInfoWindow();
    }
    hideMarkerInfoWindow(markerId) {
      let t6;
      let markerController = this[_markerIdToController][$_get](markerId);
      t6 = markerController;
      t6 == null ? null : t6.hideInfoWindow();
    }
    isInfoWindowShown(markerId) {
      let t6, t6$;
      let markerController = this[_markerIdToController][$_get](markerId);
      t6$ = (t6 = markerController, t6 == null ? null : t6.infoWindowShown);
      return t6$ == null ? false : t6$;
    }
    [_onMarkerTap](markerId) {
      let t6, t6$;
      this[_streamController].add(new map_event.MarkerTapEvent.new(this.mapId, markerId));
      t6$ = (t6 = this[_markerIdToController][$_get](markerId), t6 == null ? null : t6.consumeTapEvents);
      return t6$ == null ? false : t6$;
    }
    [_onInfoWindowTap](markerId) {
      this[_streamController].add(new map_event.InfoWindowTapEvent.new(this.mapId, markerId));
    }
    [_onMarkerDragStart](markerId, latLng) {
      this[_streamController].add(new map_event.MarkerDragStartEvent.new(this.mapId, google_maps_flutter_web._gmLatLngToLatLng(latLng), markerId));
    }
    [_onMarkerDrag](markerId, latLng) {
      this[_streamController].add(new map_event.MarkerDragEvent.new(this.mapId, google_maps_flutter_web._gmLatLngToLatLng(latLng), markerId));
    }
    [_onMarkerDragEnd](markerId, latLng) {
      this[_streamController].add(new map_event.MarkerDragEndEvent.new(this.mapId, google_maps_flutter_web._gmLatLngToLatLng(latLng), markerId));
    }
    [_hideAllMarkerInfoWindow]() {
      this[_markerIdToController][$values][$where](dart.fn(controller => controller === null ? false : controller.infoWindowShown, T.MarkerControllerTobool()))[$forEach](dart.fn(controller => controller.hideInfoWindow(), T.MarkerControllerTovoid()));
    }
  };
  (google_maps_flutter_web.MarkersController.new = function(opts) {
    let stream = opts && 'stream' in opts ? opts.stream : null;
    this[_streamController] = stream;
    this[_markerIdToController] = new (T.LinkedMapOfMarkerId$MarkerController()).new();
    google_maps_flutter_web.MarkersController.__proto__.new.call(this);
    ;
  }).prototype = google_maps_flutter_web.MarkersController.prototype;
  dart.addTypeTests(google_maps_flutter_web.MarkersController);
  dart.addTypeCaches(google_maps_flutter_web.MarkersController);
  dart.setMethodSignature(google_maps_flutter_web.MarkersController, () => ({
    __proto__: dart.getMethods(google_maps_flutter_web.MarkersController.__proto__),
    addMarkers: dart.fnType(dart.void, [core.Set$(marker.Marker)]),
    [_addMarker]: dart.fnType(dart.void, [marker.Marker]),
    changeMarkers: dart.fnType(dart.void, [core.Set$(marker.Marker)]),
    [_changeMarker]: dart.fnType(dart.void, [marker.Marker]),
    removeMarkers: dart.fnType(dart.void, [core.Set$(marker.MarkerId)]),
    [_removeMarker]: dart.fnType(dart.void, [marker.MarkerId]),
    showMarkerInfoWindow: dart.fnType(dart.void, [marker.MarkerId]),
    hideMarkerInfoWindow: dart.fnType(dart.void, [marker.MarkerId]),
    isInfoWindowShown: dart.fnType(core.bool, [marker.MarkerId]),
    [_onMarkerTap]: dart.fnType(core.bool, [marker.MarkerId]),
    [_onInfoWindowTap]: dart.fnType(dart.void, [marker.MarkerId]),
    [_onMarkerDragStart]: dart.fnType(dart.void, [marker.MarkerId, dart.lazyJSType(() => dart.global.google.maps.LatLng, "google.maps.LatLng")]),
    [_onMarkerDrag]: dart.fnType(dart.void, [marker.MarkerId, dart.lazyJSType(() => dart.global.google.maps.LatLng, "google.maps.LatLng")]),
    [_onMarkerDragEnd]: dart.fnType(dart.void, [marker.MarkerId, dart.lazyJSType(() => dart.global.google.maps.LatLng, "google.maps.LatLng")]),
    [_hideAllMarkerInfoWindow]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(google_maps_flutter_web.MarkersController, () => ({
    __proto__: dart.getGetters(google_maps_flutter_web.MarkersController.__proto__),
    markers: core.Map$(marker.MarkerId, google_maps_flutter_web.MarkerController)
  }));
  dart.setLibraryUri(google_maps_flutter_web.MarkersController, I[2]);
  dart.setFieldSignature(google_maps_flutter_web.MarkersController, () => ({
    __proto__: dart.getFields(google_maps_flutter_web.MarkersController.__proto__),
    [_markerIdToController]: dart.finalFieldType(core.Map$(marker.MarkerId, google_maps_flutter_web.MarkerController)),
    [_streamController]: dart.fieldType(async.StreamController$(map_event.MapEvent))
  }));
  google_maps_flutter_web._getCssColor = function _getCssColor(color) {
    if (color === null) {
      return google_maps_flutter_web._defaultCssColor;
    }
    return "#" + color.value[$toRadixString](16)[$padLeft](8, "0")[$substring](2);
  };
  google_maps_flutter_web._getCssOpacity = function _getCssOpacity(color) {
    if (color === null) {
      return google_maps_flutter_web._defaultCssOpacity;
    }
    return color.opacity;
  };
  google_maps_flutter_web._rawOptionsToGmapsOptions = function _rawOptionsToGmapsOptions(rawOptions) {
    let t6;
    let options = {};
    if (google_maps_flutter_web._mapTypeToMapTypeId[$containsKey](rawOptions[$_get]("mapType"))) {
      options.mapTypeId = google_maps_flutter_web._mapTypeToMapTypeId[$_get](rawOptions[$_get]("mapType"));
    }
    if (rawOptions[$_get]("minMaxZoomPreference") != null) {
      t6 = options;
      (() => {
        t6.minZoom = T.numN().as(dart.dsend(rawOptions[$_get]("minMaxZoomPreference"), '_get', [0]));
        t6.maxZoom = T.numN().as(dart.dsend(rawOptions[$_get]("minMaxZoomPreference"), '_get', [1]));
        return t6;
      })();
    }
    if (rawOptions[$_get]("cameraTargetBounds") != null) {
    }
    if (rawOptions[$_get]("zoomControlsEnabled") != null) {
      options.zoomControl = T.boolN().as(rawOptions[$_get]("zoomControlsEnabled"));
    }
    if (rawOptions[$_get]("styles") != null) {
      google_maps_core$46js$46g['MapOptions$Ext|set#styles'](options, T.ListNOfMapTypeStyleN().as(rawOptions[$_get]("styles")));
    }
    if (dart.equals(rawOptions[$_get]("scrollGesturesEnabled"), false) || dart.equals(rawOptions[$_get]("zoomGesturesEnabled"), false)) {
      options.gestureHandling = "none";
    } else {
      options.gestureHandling = "auto";
    }
    options.mapTypeControl = false;
    options.fullscreenControl = false;
    options.streetViewControl = false;
    return options;
  };
  google_maps_flutter_web._applyInitialPosition = function _applyInitialPosition(initialPosition, options) {
    if (initialPosition !== null) {
      options.zoom = initialPosition.zoom;
      options.center = new dart.global.google.maps.LatLng(initialPosition.target.latitude, initialPosition.target.longitude);
    }
    return options;
  };
  google_maps_flutter_web._isTrafficLayerEnabled = function _isTrafficLayerEnabled(rawOptions) {
    let t6;
    return core.bool.as((t6 = rawOptions[$_get]("trafficEnabled"), t6 == null ? false : t6));
  };
  google_maps_flutter_web._isJsonMapStyle = function _isJsonMapStyle(value) {
    return google_maps_flutter_web._mapStyleKeys.intersection(value[$keys][$toSet]())[$isNotEmpty];
  };
  google_maps_flutter_web._mapStyles = function _mapStyles(mapStyleJson) {
    let styles = T.JSArrayOfMapTypeStyle().of([]);
    if (mapStyleJson != null) {
      styles = T.ListOfMapTypeStyle().as(dart.dsend(dart.dgsend(convert.json.decode(mapStyleJson, {reviver: dart.fn((key, value) => {
          let t6;
          if (core.Map.is(value) && google_maps_flutter_web._isJsonMapStyle(value)) {
            t6 = {};
            return (() => {
              t6.elementType = T.StringN().as(value[$_get]("elementType"));
              t6.featureType = T.StringN().as(value[$_get]("featureType"));
              google_maps_core$46js$46g['MapTypeStyle$Ext|set#stylers'](t6, core.List.as(value[$_get]("stylers"))[$map](dart.dynamic, dart.fn(e => js_util.jsify(core.Object.as(e)), T.dynamicTodynamic()))[$toList]());
              return t6;
            })();
          }
          return value;
        }, T.ObjectNAndObjectNToObjectN())}), [dart.anonymousJSType("MapTypeStyle")], 'cast', []), 'toList', []));
    }
    return styles;
  };
  google_maps_flutter_web._latLngToGmLatLng = function _latLngToGmLatLng(latLng) {
    return new dart.global.google.maps.LatLng(latLng.latitude, latLng.longitude);
  };
  google_maps_flutter_web._gmLatLngToLatLng = function _gmLatLngToLatLng(latLng) {
    return new location.LatLng.new(google_maps_core$46js$46g['LatLng$Ext|get#lat'](latLng)[$toDouble](), google_maps_core$46js$46g['LatLng$Ext|get#lng'](latLng)[$toDouble]());
  };
  google_maps_flutter_web._gmLatLngBoundsTolatLngBounds = function _gmLatLngBoundsTolatLngBounds(latLngBounds) {
    return new location.LatLngBounds.new({southwest: google_maps_flutter_web._gmLatLngToLatLng(google_maps_core$46js$46g['LatLngBounds$Ext|get#southWest'](latLngBounds)), northeast: google_maps_flutter_web._gmLatLngToLatLng(google_maps_core$46js$46g['LatLngBounds$Ext|get#northEast'](latLngBounds))});
  };
  google_maps_flutter_web._gmViewportToCameraPosition = function _gmViewportToCameraPosition(map) {
    let t6, t6$, t6$0, t6$1, t6$2, t6$3, t6$4;
    return new camera.CameraPosition.new({target: google_maps_flutter_web._gmLatLngToLatLng((t6 = google_maps_core$46js$46g['GMap$Ext|get#center'](map), t6 == null ? google_maps_flutter_web._nullGmapsLatLng : t6)), bearing: (t6$0 = (t6$ = google_maps_core$46js$46g['GMap$Ext|get#heading'](map), t6$ == null ? null : t6$[$toDouble]()), t6$0 == null ? 0.0 : t6$0), tilt: (t6$2 = (t6$1 = google_maps_core$46js$46g['GMap$Ext|get#tilt'](map), t6$1 == null ? null : t6$1[$toDouble]()), t6$2 == null ? 0.0 : t6$2), zoom: (t6$4 = (t6$3 = google_maps_core$46js$46g['GMap$Ext|get#zoom'](map), t6$3 == null ? null : t6$3[$toDouble]()), t6$4 == null ? 0.0 : t6$4)});
  };
  google_maps_flutter_web._infoWindowOptionsFromMarker = function _infoWindowOptionsFromMarker(marker) {
    let t6, t6$, t6$0, t6$1, t6$2, t6$3;
    let markerTitle = (t6 = marker.infoWindow.title, t6 == null ? "" : t6);
    let markerSnippet = (t6$ = marker.infoWindow.snippet, t6$ == null ? "" : t6$);
    if (markerTitle[$isEmpty] && markerSnippet[$isEmpty]) {
      return null;
    }
    let container = (t6$0 = html.DivElement.new(), (() => {
      t6$0[$id] = "gmaps-marker-" + marker.markerId.value + "-infowindow";
      return t6$0;
    })());
    if (markerTitle[$isNotEmpty]) {
      let title = (t6$1 = html.HeadingElement.h3(), (() => {
        t6$1[$className] = "infowindow-title";
        t6$1[$innerText] = markerTitle;
        return t6$1;
      })());
      container[$children][$add](title);
    }
    if (markerSnippet[$isNotEmpty]) {
      let snippet = (t6$2 = html.DivElement.new(), (() => {
        t6$2[$className] = "infowindow-snippet";
        t6$2[$setInnerHtml](sanitize_html.sanitizeHtml(markerSnippet), {treeSanitizer: html.NodeTreeSanitizer.trusted});
        return t6$2;
      })());
      container[$children][$add](snippet);
    }
    t6$3 = {};
    return (() => {
      t6$3.content = container;
      t6$3.zIndex = marker.zIndex;
      return t6$3;
    })();
  };
  google_maps_flutter_web._markerOptionsFromMarker = function _markerOptionsFromMarker(marker, currentMarker) {
    let t6, t6$, t6$0, t7, t7$, t7$0, t6$1;
    let iconConfig = core.List.as(marker.icon.toJson());
    let icon = null;
    if (iconConfig !== null) {
      if (dart.equals(iconConfig[$_get](0), "fromAssetImage")) {
        if (!(iconConfig[$length] >= 2)) dart.assertFailed(null, I[8], 229, 14, "iconConfig.length >= 2");
        icon = (t6 = {}, (() => {
          t6.url = ui.webOnlyAssetManager.getAssetUrl(core.String.as(iconConfig[$_get](1)));
          return t6;
        })());
        if (iconConfig[$length] >= 4 && iconConfig[$_get](3) != null) {
          let size = new dart.global.google.maps.Size(T.numN().as(dart.dsend(iconConfig[$_get](3), '_get', [0])), T.numN().as(dart.dsend(iconConfig[$_get](3), '_get', [1])));
          t6$ = icon;
          (() => {
            t6$.size = size;
            t6$.scaledSize = size;
            return t6$;
          })();
        }
      } else if (dart.equals(iconConfig[$_get](0), "fromBytes")) {
        let bytes = T.ListOfint().as(iconConfig[$_get](1));
        let blob = html.Blob.new([bytes]);
        icon = (t6$0 = {}, (() => {
          t6$0.url = html.Url.createObjectUrlFromBlob(blob);
          return t6$0;
        })());
      }
    }
    t6$1 = {};
    return (() => {
      t6$1.position = (t7$ = (t7 = currentMarker, t7 == null ? null : google_maps_core$46js$46g['Marker$Ext|get#position'](t7)), t7$ == null ? new dart.global.google.maps.LatLng(marker.position.latitude, marker.position.longitude) : t7$);
      t6$1.title = sanitize_html.sanitizeHtml((t7$0 = marker.infoWindow.title, t7$0 == null ? "" : t7$0));
      t6$1.zIndex = marker.zIndex;
      t6$1.visible = marker.visible;
      t6$1.opacity = marker.alpha;
      t6$1.draggable = marker.draggable;
      t6$1.icon = icon;
      return t6$1;
    })();
  };
  google_maps_flutter_web._circleOptionsFromCircle = function _circleOptionsFromCircle(circle) {
    let t6;
    let circleOptions = (t6 = {}, (() => {
      t6.strokeColor = google_maps_flutter_web._getCssColor(circle.strokeColor);
      t6.strokeOpacity = google_maps_flutter_web._getCssOpacity(circle.strokeColor);
      t6.strokeWeight = circle.strokeWidth;
      t6.fillColor = google_maps_flutter_web._getCssColor(circle.fillColor);
      t6.fillOpacity = google_maps_flutter_web._getCssOpacity(circle.fillColor);
      t6.center = new dart.global.google.maps.LatLng(circle.center.latitude, circle.center.longitude);
      t6.radius = circle.radius;
      t6.visible = circle.visible;
      t6.zIndex = circle.zIndex;
      return t6;
    })());
    return circleOptions;
  };
  google_maps_flutter_web._polygonOptionsFromPolygon = function _polygonOptionsFromPolygon(googleMap, polygon) {
    let t6;
    let path = T.JSArrayOfLatLng().of([]);
    polygon.points[$forEach](dart.fn(point => {
      path[$add](google_maps_flutter_web._latLngToGmLatLng(point));
    }, T.LatLngTovoid$1()));
    let polygonDirection = google_maps_flutter_web._isPolygonClockwise(path);
    let paths = T.JSArrayOfListOfLatLng().of([path]);
    let holeIndex = 0;
    polygon.holes[$forEach](dart.fn(hole => {
      let holePath = hole[$map](dart.lazyJSType(() => dart.global.google.maps.LatLng, "google.maps.LatLng"), dart.fn(point => google_maps_flutter_web._latLngToGmLatLng(point), T.LatLngToLatLng()))[$toList]();
      if (google_maps_flutter_web._isPolygonClockwise(holePath) === polygonDirection) {
        holePath = holePath[$reversed][$toList]();
        if (true) {
          core.print("Hole [" + dart.str(holeIndex) + "] in Polygon [" + polygon.polygonId.value + "] has been reversed." + " Ensure holes in polygons are \"wound in the opposite direction to the outer path.\"" + " More info: https://github.com/flutter/flutter/issues/74096");
        }
      }
      paths[$add](holePath);
      holeIndex = holeIndex + 1;
    }, T.ListOfLatLngTovoid()));
    t6 = {};
    return (() => {
      t6.paths = paths;
      t6.strokeColor = google_maps_flutter_web._getCssColor(polygon.strokeColor);
      t6.strokeOpacity = google_maps_flutter_web._getCssOpacity(polygon.strokeColor);
      t6.strokeWeight = polygon.strokeWidth;
      t6.fillColor = google_maps_flutter_web._getCssColor(polygon.fillColor);
      t6.fillOpacity = google_maps_flutter_web._getCssOpacity(polygon.fillColor);
      t6.visible = polygon.visible;
      t6.zIndex = polygon.zIndex;
      t6.geodesic = polygon.geodesic;
      return t6;
    })();
  };
  google_maps_flutter_web._isPolygonClockwise = function _isPolygonClockwise(path) {
    let direction = 0.0;
    for (let i = 0; i < path[$length]; i = i + 1) {
      direction = direction + (google_maps_core$46js$46g['LatLng$Ext|get#lat'](path[$_get]((i + 1)[$modulo](path[$length]))) - google_maps_core$46js$46g['LatLng$Ext|get#lat'](path[$_get](i))) * (google_maps_core$46js$46g['LatLng$Ext|get#lng'](path[$_get]((i + 1)[$modulo](path[$length]))) + google_maps_core$46js$46g['LatLng$Ext|get#lng'](path[$_get](i)));
    }
    return direction >= 0;
  };
  google_maps_flutter_web._polylineOptionsFromPolyline = function _polylineOptionsFromPolyline(googleMap, polyline) {
    let t6;
    let paths = T.JSArrayOfLatLng().of([]);
    polyline.points[$forEach](dart.fn(point => {
      paths[$add](google_maps_flutter_web._latLngToGmLatLng(point));
    }, T.LatLngTovoid$1()));
    t6 = {};
    return (() => {
      t6.path = paths;
      t6.strokeWeight = polyline.width;
      t6.strokeColor = google_maps_flutter_web._getCssColor(polyline.color);
      t6.strokeOpacity = google_maps_flutter_web._getCssOpacity(polyline.color);
      t6.visible = polyline.visible;
      t6.zIndex = polyline.zIndex;
      t6.geodesic = polyline.geodesic;
      return t6;
    })();
  };
  google_maps_flutter_web._applyCameraUpdate = function _applyCameraUpdate(map, update) {
    let t6, t7, t7$, t7$0;
    let json = core.List.as(update.toJson());
    switch (json[$_get](0)) {
      case "newCameraPosition":
      {
        google_maps_core$46js$46g['GMap$Ext|set#heading'](map, T.numN().as(dart.dsend(json[$_get](1), '_get', ["bearing"])));
        google_maps_core$46js$46g['GMap$Ext|set#zoom'](map, T.numN().as(dart.dsend(json[$_get](1), '_get', ["zoom"])));
        map.panTo(new dart.global.google.maps.LatLng(T.numN().as(dart.dsend(dart.dsend(json[$_get](1), '_get', ["target"]), '_get', [0])), T.numN().as(dart.dsend(dart.dsend(json[$_get](1), '_get', ["target"]), '_get', [1]))));
        google_maps_core$46js$46g['GMap$Ext|set#tilt'](map, T.numN().as(dart.dsend(json[$_get](1), '_get', ["tilt"])));
        break;
      }
      case "newLatLng":
      {
        map.panTo(new dart.global.google.maps.LatLng(T.numN().as(dart.dsend(json[$_get](1), '_get', [0])), T.numN().as(dart.dsend(json[$_get](1), '_get', [1]))));
        break;
      }
      case "newLatLngZoom":
      {
        google_maps_core$46js$46g['GMap$Ext|set#zoom'](map, T.numN().as(json[$_get](2)));
        map.panTo(new dart.global.google.maps.LatLng(T.numN().as(dart.dsend(json[$_get](1), '_get', [0])), T.numN().as(dart.dsend(json[$_get](1), '_get', [1]))));
        break;
      }
      case "newLatLngBounds":
      {
        map.fitBounds(new dart.global.google.maps.LatLngBounds(new dart.global.google.maps.LatLng(T.numN().as(dart.dsend(dart.dsend(json[$_get](1), '_get', [0]), '_get', [0])), T.numN().as(dart.dsend(dart.dsend(json[$_get](1), '_get', [0]), '_get', [1]))), new dart.global.google.maps.LatLng(T.numN().as(dart.dsend(dart.dsend(json[$_get](1), '_get', [1]), '_get', [0])), T.numN().as(dart.dsend(dart.dsend(json[$_get](1), '_get', [1]), '_get', [1])))));
        break;
      }
      case "scrollBy":
      {
        map.panBy(T.numN().as(json[$_get](1)), T.numN().as(json[$_get](2)));
        break;
      }
      case "zoomBy":
      {
        let focusLatLng = null;
        let zoomDelta = core.double.as((t6 = json[$_get](1), t6 == null ? 0.0 : t6));
        let newZoomDelta = zoomDelta < 0 ? zoomDelta[$floor]() : zoomDelta[$ceil]();
        if (json[$length] === 3) {
          try {
            focusLatLng = google_maps_flutter_web._pixelToLatLng(map, core.int.as(dart.dsend(json[$_get](2), '_get', [0])), core.int.as(dart.dsend(json[$_get](2), '_get', [1])));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
            } else
              throw e$;
          }
        }
        google_maps_core$46js$46g['GMap$Ext|set#zoom'](map, dart.notNull((t7 = google_maps_core$46js$46g['GMap$Ext|get#zoom'](map), t7 == null ? 0 : t7)) + newZoomDelta);
        if (focusLatLng != null) {
          map.panTo(focusLatLng);
        }
        break;
      }
      case "zoomIn":
      {
        google_maps_core$46js$46g['GMap$Ext|set#zoom'](map, dart.notNull((t7$ = google_maps_core$46js$46g['GMap$Ext|get#zoom'](map), t7$ == null ? 0 : t7$)) + 1);
        break;
      }
      case "zoomOut":
      {
        google_maps_core$46js$46g['GMap$Ext|set#zoom'](map, dart.notNull((t7$0 = google_maps_core$46js$46g['GMap$Ext|get#zoom'](map), t7$0 == null ? 0 : t7$0)) - 1);
        break;
      }
      case "zoomTo":
      {
        google_maps_core$46js$46g['GMap$Ext|set#zoom'](map, T.numN().as(json[$_get](1)));
        break;
      }
      default:
      {
        dart.throw(new core.UnimplementedError.new("Unimplemented CameraMove: " + dart.str(json[$_get](0)) + "."));
      }
    }
  };
  google_maps_flutter_web._pixelToLatLng = function _pixelToLatLng(map, x, y) {
    let bounds = google_maps_core$46js$46g['GMap$Ext|get#bounds'](map);
    let projection = google_maps_core$46js$46g['GMap$Ext|get#projection'](map);
    let zoom = google_maps_core$46js$46g['GMap$Ext|get#zoom'](map);
    if (!(bounds != null)) dart.assertFailed("Map Bounds required to compute LatLng of screen x/y.", I[8], 426, 7, "bounds != null");
    if (!(projection != null)) dart.assertFailed("Map Projection required to compute LatLng of screen x/y", I[8], 427, 10, "projection != null");
    if (!(zoom != null)) dart.assertFailed("Current map zoom level required to compute LatLng of screen x/y", I[8], 429, 10, "zoom != null");
    let ne = google_maps_core$46js$46g['LatLngBounds$Ext|get#northEast'](dart.nullCheck(bounds));
    let sw = google_maps_core$46js$46g['LatLngBounds$Ext|get#southWest'](bounds);
    let topRight = dart.nullCheck(dart.nullCheck(google_maps_core$46js$46g['Projection$Ext|get#fromLatLngToPoint'](dart.nullCheck(projection)))(ne));
    let bottomLeft = dart.nullCheck(dart.nullCheck(google_maps_core$46js$46g['Projection$Ext|get#fromLatLngToPoint'](projection))(sw));
    let scale = (1)[$leftShift](dart.nullCheck(zoom)[$toInt]());
    let point = new dart.global.google.maps.Point(x / scale + dart.nullCheck(bottomLeft.x), y / scale + dart.nullCheck(topRight.y));
    return dart.nullCheck(dart.nullCheck(google_maps_core$46js$46g['Projection$Ext|get#fromPointToLatLng'](projection))(point));
  };
  dart.defineLazy(google_maps_flutter_web, {
    /*google_maps_flutter_web._nullGmapsLatLng*/get _nullGmapsLatLng() {
      return new dart.global.google.maps.LatLng(0, 0);
    },
    /*google_maps_flutter_web._nullGmapsLatLngBounds*/get _nullGmapsLatLngBounds() {
      return new dart.global.google.maps.LatLngBounds(google_maps_flutter_web._nullGmapsLatLng, google_maps_flutter_web._nullGmapsLatLng);
    },
    /*google_maps_flutter_web._defaultCssColor*/get _defaultCssColor() {
      return "#000000";
    },
    /*google_maps_flutter_web._defaultCssOpacity*/get _defaultCssOpacity() {
      return 0.0;
    },
    /*google_maps_flutter_web._mapTypeToMapTypeId*/get _mapTypeToMapTypeId() {
      return new (T.IdentityMapOfint$MapTypeId()).from([0, dart.global.google.maps.MapTypeId.ROADMAP, 1, dart.global.google.maps.MapTypeId.ROADMAP, 2, dart.global.google.maps.MapTypeId.SATELLITE, 3, dart.global.google.maps.MapTypeId.TERRAIN, 4, dart.global.google.maps.MapTypeId.HYBRID]);
    },
    /*google_maps_flutter_web._mapStyleKeys*/get _mapStyleKeys() {
      return T.LinkedHashSetOfString().from(["elementType", "featureType", "stylers"]);
    }
  }, false);
  dart.trackLibraries("packages/google_maps_flutter_web/src/types.dart", {
    "package:google_maps_flutter_web/src/types.dart": types,
    "package:google_maps_flutter_web/google_maps_flutter_web.dart": google_maps_flutter_web
  }, {
    "package:google_maps_flutter_web/google_maps_flutter_web.dart": ["src/google_maps_flutter_web.dart", "src/google_maps_controller.dart", "src/circle.dart", "src/circles.dart", "src/polygon.dart", "src/polygons.dart", "src/polyline.dart", "src/polylines.dart", "src/marker.dart", "src/markers.dart", "src/convert.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["types.dart","google_maps_flutter_web.dart","google_maps_controller.dart","circle.dart","circles.dart","polygon.dart","polygons.dart","polyline.dart","polylines.dart","marker.dart","markers.dart","convert.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBkB;;IAAS;;AAAT;IAAS;;;AAGhB;;IAAK;;AAAL;IAAK;cAGK,OAAkB;AACjB,MAAb,aAAQ,KAAK;AACQ,MAArB,iBAAY,SAAS;IAC5B;;;2CATgB;uCAGP;;EAOX;;;;;;;;;;;;;;;;;;;;;;;;;;;wBClBqC;AACsB,MAA7B,kEAAW;IACvC;oBAOmD;AAC/B,MAAlB,iBAAW,OAAO;IACpB;cAG6B;AAAU,YAAA,AAAY,YAAP,KAAK;IAAQ;WAG5B;AACrB,uBAAa,AAAQ,sBAAC,KAAK;AACjC,YAAO,AAAW,UAAD,6BACb;AACJ,4DAAO,UAAU;IACnB;SAGsB;AAAL;AAIf,cAAO,AAAY,WAAP,KAAK,+BAAW;MAC9B;;qBAQuB;UACR;AAFc;AAIgB,QAA3C,AAAY,WAAP,KAAK,mBAAmB,aAAa;MAC5C;;kBAKgB;UACD;AAFW;AAIgB,QAAxC,AAAY,WAAP,KAAK,gBAAgB,aAAa;MACzC;;mBAKiB;UACF;AAFY;AAIiB,QAA1C,AAAY,WAAP,KAAK,iBAAiB,cAAc;MAC3C;;oBAKkB;UACH;AAFa;AAIkB,QAA5C,AAAY,WAAP,KAAK,kBAAkB,eAAe;MAC7C;;kBAKgB;UACD;AAFW;AAIgB,QAAxC,AAAY,WAAP,KAAK,gBAAgB,aAAa;MACzC;;;UAI4B;UACb;AAFgB;AAI7B;MACF;;mBAIgB;UACD;AAFY;AAIzB;MACF;;kBAKe;UACA;AAFW;AAIxB,cAAO,iBAAW,YAAY,UAAS,KAAK;MAC9C;;eAKe;UACA;AAFQ;AAIrB,cAAO,AAAY,YAAP,KAAK,aAAa,YAAY;MAC5C;;gBAUU;UACK;AAFS;AAMpB,QAFF,AAAY,WAAP,KAAK,mBAAmB,4CAC3B,UAAU,mCAAW,QAAQ;MAEjC;;;UAKe;AAEb,YAAO,AAAY,YAAP,KAAK;IACnB;wBAKS;UACM;AAEb,YAAO,AAAY,YAAP,KAAK,sBAAsB,MAAM;IAC/C;cAKmB;UACJ;AAEb,YAAO,AAAY,YAAP,KAAK,YAAY,gBAAgB;IAC/C;yBASW;UACI;AAFkB;AAIK,QAApC,AAAY,WAAP,KAAK,iBAAiB,QAAQ;MACrC;;yBASW;UACI;AAFkB;AAIK,QAApC,AAAY,WAAP,KAAK,iBAAiB,QAAQ;MACrC;;4BASW;UACI;AAFqB;AAIlC,cAAO,AAAY,YAAP,KAAK,oBAAoB,QAAQ;MAC/C;;;UAKe;AAEb,YAAO,AAAY,YAAP,KAAK;IACnB;;UAMiE;AAC/D,YAAsB,gFAAf,cAAQ,KAAK;IACtB;;UAGmD;AACjD,YAAsB,yEAAf,cAAQ,KAAK;IACtB;;UAGmD;AACjD,YAAsB,yEAAf,cAAQ,KAAK;IACtB;;UAGiD;AAC/C,YAAsB,wEAAf,cAAQ,KAAK;IACtB;;UAGyD;AACvD,YAAsB,4EAAf,cAAQ,KAAK;IACtB;;UAG6D;AAC3D,YAAsB,8EAAf,cAAQ,KAAK;IACtB;;UAGmD;AACjD,YAAsB,yEAAf,cAAQ,KAAK;IACtB;;UAGyD;AACvD,YAAsB,4EAAf,cAAQ,KAAK;IACtB;;UAGqD;AACnD,YAAsB,0EAAf,cAAQ,KAAK;IACtB;;UAGmD;AACjD,YAAsB,yEAAf,cAAQ,KAAK;IACtB;;UAGiD;AAC/C,YAAsB,wEAAf,cAAQ,KAAK;IACtB;;UAGwC;AACtC,YAAsB,qEAAf,cAAQ,KAAK;IACtB;;UAGoD;AAClD,YAAsB,2EAAf,cAAQ,KAAK;IACtB;;UAI2B;AACJ,MAArB,AAAY,WAAP,KAAK;AACY,MAAtB,AAAS,wBAAO,KAAK;IACvB;cAIM,YACwB;;UACJ;UACZ;UACC;UACC;UACF;UACK;UAC2B;UAEvB;AAGrB,gBAAI,AAAQ,sBAAC,UAAU,gBAAX,OAAc;AACxB,mCAA4B,WAArB,AAAQ,sBAAC,UAAU;;AAGK,uBAC7B;AAEE,iCAAgB,4EACG,qBAAqB,SACrC,UAAU,oBACC,UAAU,WACnB,OAAO,YACN,QAAQ,aACP,SAAS,WACX,OAAO,cACJ,UAAU,IARF;AASnB;;;AAEiC,MAApC,AAAQ,sBAAC,UAAU,EAAI,aAAa;AAOlC,MALmB,AAA8B,AAAM,uFAAzD,AAAc,aAAD,+BAAiD,QAAC;AAC7D,cAAO,AAAW,UAAD,KAAI,AAAM,KAAD,2BACtB;AAEmC,QAAvC,AAAsB,qBAAD,CAAM,AAAM,KAAD;;AAGlC,YAAO,AAAc,AAAO,aAAR,oCAChB;AAEJ,YAA2B,gBAApB,AAAc,aAAD;IACtB;;;IA/TI,iBAAW;;;EAgUjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBCtT0B;AAAU,YAAA,AAAuC,8CAAN,KAAK;IAAC;;;AAIxD;;IAAI;;AAAJ;IAAI;;AAInB,UAAI,AAAQ,0BAAY,AAAkB;AAGvC,QAFD,gBAAU,iDACE,mBAAa;;AAG3B,YAAO;IACT;;AAOwC;IAAa;;AAUZ;IAAiB;;AAG3B,YAAA,AAAkB;IAAM;;;UAwD7B;UACL;UACA;UACC;UACC;AAES,MAA9B,2BAAqB,SAAS;AACoB,MAAlD,4BAA6B,KAAR,OAAO,EAAP,aAAW;AACkB,MAAlD,4BAA6B,MAAR,OAAO,EAAP,cAAW;AACqB,MAArD,6BAA+B,OAAT,QAAQ,EAAR,eAAY;AACsB,MAAxD,8BAAiC,OAAV,SAAS,EAAT,eAAa;IACtC;iBAIkC,KAAsB;AACtD,UAAI;AACF,cAAyB,AAAC,gBAAnB,0BAAoB,GAAG,EAAE,OAAO;;AAEzC,YAAa,iCAAK,GAAG,EAAE,OAAO;IAChC;;AAI0B,YAAA,AAAW;IAAO;;AAuBtC,oBAAU,kDAA0B;AAEwB,MAAhE,UAAU,8CAAsB,8BAAwB,OAAO;AAGzD,gBAAM,iBAAW,YAAM,OAAO;AACpB,MAAhB,mBAAa,GAAG;AAEK,MAArB,uBAAiB,GAAG;AACW,MAA/B,iCAA2B,GAAG;AAQ7B,MALD,uCACW,yBACA,0BACC,4BACC;AAGgD,MAA7D,uBAAiB,GAAG,EAAE,+CAAuB;IAC/C;uBAGiC;AAI7B,MAHE,AAAc,AAAM,wDAAxB,GAAG,wBAA0B,QAAC;AAEmB,QAA/C,AAAkB,4BAAI,iDAAiB;;AAOvC,MALE,AAAQ,kDAAZ,GAAG,SAAgB,QAAC;AAClB,cAAO,AAAM,AAAO,KAAR;AAGX,QAFD,AAAkB,4BAChB,8BAAY,cAAQ,0CAA8B,eAAZ,AAAM,KAAD;;AAQ7C,MALE,AAAa,uDAAjB,GAAG,SAAqB,QAAC;AACvB,cAAO,AAAM,AAAO,KAAR;AAGX,QAFD,AAAkB,4BAChB,oCAAkB,cAAQ,0CAA8B,eAAZ,AAAM,KAAD;;AAWnD,MARE,AAAgB,0DAApB,GAAG,SAAwB,QAAC;AAC1B,aAAK;AACgB,UAAnB,qBAAe;AACsC,UAArD,AAAkB,4BAAI,yCAAuB;;AAI9C,QAFD,AAAkB,4BAChB,kCAAgB,cAAQ,oDAA4B,GAAG;;AAMzD,MAHE,AAAO,iDAAX,GAAG,SAAe,QAAC;AACG,QAApB,qBAAe;AAC+B,QAA9C,AAAkB,4BAAI,kCAAgB;;IAE1C;iCAG2C;AAOzC,YAAO,AAAmB,qDACtB;AACJ,YAAO,AAAoB,sDACvB;AACJ,YAAO,AAAqB,uDACxB;AACJ,YAAO,AAAmB,qDACtB;AAEsC,MAAxB,AAAE,eAApB,oCAA8B,cAAQ,GAAG;AACE,MAAxB,AAAE,eAArB,qCAA+B,cAAQ,GAAG;AACE,MAAxB,AAAE,eAAtB,sCAAgC,cAAQ,GAAG;AACD,MAAxB,AAAE,eAApB,oCAA8B,cAAQ,GAAG;AAEZ,MAA7B,+BAAyB;IAC3B;;UAIc;UACA;UACC;UACC;AAEd,WACI,gDACA,AAAuE,yEACnE;AAM+B,MAArB,AAAE,eAApB,qCAA+B,OAAO;AACC,MAArB,AAAE,eAApB,qCAA+B,OAAO;AACI,MAAvB,AAAE,eAArB,uCAAiC,QAAQ;AACI,MAAzB,AAAE,eAAtB,yCAAmC,SAAS;IAC9C;uBAK2D;AAIxD,MAHD,uBAAkC;;AAC7B;;AACA,iCAAU;AAAV;;;AAEL,YAAO;IACT;qBAK2C;AACzC,YAAO,AAAW,6CAAS;AAErB,uBAAa,uBAAiB,aAAa;AAEC,MAAlD,kBAAY,kDAA0B,UAAU;AACiB,MAAjE,uBAA2B,eAAV,mBAAa,+CAAuB,UAAU;IACjE;kBAGkC;;AACH,WAA7B;0BAAY,sDAAU,OAAO;IAC/B;uBAGiC,KAAU;;AACzC,UAAI,MAAM,IAAI,AAAc;AAC2B,QAArD,wEAAsB;AAAgB,iBAAI,OAAO,GAAG;;;;AAEtD,WAAK,MAAM,IAAI;AACkB,QAAlB,AAAE,eAAf,yBAAmB,OAAO;AACN,QAApB,sBAAgB;;IAEpB;;AAMqC;;AACnC,cAAO,AAAW,6CAAS;AAE3B,cAAO,wDACoB,MAAzB,MAAkB,iDAAF,eAAV,qBAAN,aAA4B;MAEhC;;wBAGoD;AAAR;AAC1C,cAAO,AAAW,6CACd;AAEE,oBAAQ,oCAA2B,eAAV,mBAAa,0CAAkB,MAAM;AAEpE,cAAO,gDAA2B,AAAE,eAAT,AAAM,KAAD,kBAAuB,AAAE,eAAT,AAAM,KAAD;MACvD;;cAG0C;AAAlB;AACtB,cAAO,AAAW,6CACd;AAEe,qBACf,uCAAyB,eAAV,mBAAa,AAAiB,gBAAD,IAAI,AAAiB,gBAAD;AACpE,cAAO,2CAAkB,MAAM;MACjC;;eAGqC;AAAd;AACrB,cAAO,AAAW,6CAAS;AAE3B,cAAO,4CAA6B,eAAV,mBAAa,YAAY;MACrD;;;AAG2B;AACzB,cAAO,AAAW,6CAAS;AAC3B,cAAmB,AAAK,+CAAP,eAAV,+CACH;AAEJ,cAAuB,AAAE,gBAAN,+CAAF,eAAV;MACT;;kBAKiC;;AAC/B,YACI,AAAmB,qDAAS;AACoB,WAApD;0BAAoB,cAAW,AAAQ,OAAD;AACoB,YAA1D;2BAAoB,kBAAc,AAAQ,OAAD;AACmB,aAA5D;4BAAoB,mBAAc,AAAQ,OAAD;IAC3C;mBAGmC;;AACjC,YACI,AAAoB,sDAAS;AACsB,WAAvD;0BAAqB,eAAY,AAAQ,OAAD;AACqB,YAA7D;2BAAqB,mBAAe,AAAQ,OAAD;AACoB,aAA/D;4BAAqB,oBAAe,AAAQ,OAAD;IAC7C;oBAGqC;;AACnC,YAAO,AAAqB,uDACxB;AACsD,WAA1D;0BAAsB,gBAAa,AAAQ,OAAD;AACsB,YAAhE;2BAAsB,oBAAgB,AAAQ,OAAD;AACqB,aAAlE;4BAAsB,qBAAgB,AAAQ,OAAD;IAC/C;kBAGiC;;AAC/B,YACI,AAAmB,qDAAS;AACoB,WAApD;0BAAoB,cAAW,AAAQ,OAAD;AACoB,YAA1D;2BAAoB,kBAAc,AAAQ,OAAD;AACmB,aAA5D;4BAAoB,mBAAc,AAAQ,OAAD;IAC3C;mBAG6B;;AAC3B,YAAO,AAAmB,qDACtB,AAAuE,uCAAlC,AAAS,QAAD,SAAO;AACN,WAAlD;0BAAoB,wBAAqB,QAAQ;IACnD;mBAG6B;;AAC3B,YAAO,AAAmB,qDACtB,AAAuE,uCAAlC,AAAS,QAAD,SAAO;AACN,WAAlD;0BAAoB,wBAAqB,QAAQ;IACnD;sBAGgC;;AAC9B,yDAAO,OAAoB,qBAAkB,QAAQ;YAA9C,eAAmD;IAC5D;;AASgB,MAAd,gBAAU;AACO,MAAjB,mBAAa;AACY,MAAzB,2BAAqB;AACK,MAA1B,4BAAsB;AACK,MAA3B,6BAAuB;AACE,MAAzB,2BAAqB;AACI,MAAzB,AAAkB;IACpB;;;;QA5Ve;QACuB;QACZ;QACZ;QACC;QACC;QACF;QACK;QAC0B;QAEtB;IA9DF,uBAAkC;IAMtC;uCACA;IAaG;IAOR;IAaO;IACC;IACC;IACF;IAEd,+BAAyB;IAGzB,qBAAe;IA0DI;IA3CX,eAAE,KAAK;IACI,0BAAE,gBAAgB;IACb,+BAAE,qBAAqB;IACrC,iBAAE,OAAO;IACR,kBAAE,QAAQ;IACT,mBAAE,SAAS;IACb,iBAAE,OAAO;IACH,uBAAE,UAAU;AACuC,IAAtE,2BAAqB,2DAA+B;AACoB,IAAxE,4BAAsB,4DAAgC;AACoB,IAA1E,6BAAuB,6DAAiC;AACc,IAAtE,2BAAqB,2DAA+B;AAQ3B,IAHzB,0CAAO;AACH,gBAAK,mBAAa,KAAK;AACjB,MAAN,qBAAc;AACR,MAAN,sBAAe;;;AAKlB,IAHE,AAAqB,4CACtB,mBAAa,KAAK,GAClB,QAAK,UAAW;EAEpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2DA8TqB;AAAS,sEAAM,KAAK,EAAE;;EAAK;;;;;;;;ACjZpB;IAAO;;AAGN;IAAiB;WAKd;AAC9B,YAAO,AAAQ,0CAAS;AACE,MAAjB,oDAAF,eAAP,gBAAmB,OAAO;IAC5B;;AAIE,UAAI;AACsB,QAAf,oDAAF,eAAP,gBAAmB;AACA,QAAV,mDAAF,eAAP,gBAAkB;AACC,QAAV,gDAAF,eAAP,gBAAe;AACD,QAAd,gBAAU;;IAEd;;;QAnCwB;QACjB;QACY;IACL,gBAAE,MAAM;IACE,0BAAE,gBAAgB;AACxC,QAAI,KAAK;AAGL,MAFK,AAAQ,oDAAf,MAAM,SAAgB,QAAC;AACT,QAAZ,AAAM,KAAD;;;EAGX;;;;;;;;;;;;;;;;;;;;;;;;;ACF+C;IAAqB;eAKxC;AAGxB,MAFF,AAAa,YAAD,WAAS,QAAC;AACF,QAAlB,iBAAW,MAAM;;IAErB;iBAEuB;AACrB,UAAI,AAAO,MAAD;AACR;;AAGI,8BAAoB,iDAAyB,MAAM;AAC5C,qBAAiB,mCAAO,iBAAiB;AAC9B,MAAf,gDAAT,QAAQ,EAAO;AACE,uBAAa,0DAClB,QAAQ,oBACE,AAAO,MAAD,0BACjB;AACwB,UAA7B,mBAAa,AAAO,MAAD;;AAE0B,MAAnD,AAAqB,mCAAC,AAAO,MAAD,WAAa,UAAU;IACrD;kBAG+B;AAG3B,MAFF,AAAgB,eAAD,WAAS,QAAC;AACM,QAA7B,oBAAc,cAAc;;IAEhC;oBAE0B;;AAClB,6BAAmB,AAAqB,mCAAC,AAAO,MAAD;AACK,WAA1D,gBAAgB;mBAAhB,OAAkB,UAAO,iDAAyB,MAAM;IAC1D;kBAGiC;AAM7B,MALF,AAAkB,iBAAD,WAAS,QAAC;;AACD,+BACpB,AAAqB,mCAAC,QAAQ;AACR,aAA1B,gBAAgB;qBAAhB,OAAkB;AACoB,QAAtC,AAAsB,qCAAO,QAAQ;;IAEzC;mBAG2B;;AAG6B,MAAtD,AAAkB,4BAAI,iCAAe,YAAO,QAAQ;AACpD,kBAAO,AAAqB,mCAAC,QAAQ,gBAAT,OAAY;YAAZ,eAAgC;IAC9D;;;QA9DsC;IACd,0BAAE,MAAM;IACJ,8BAAE;AAH9B;;EAG+D;;;;;;;;;;;;;;;;;;;;;;;;;ACUjC;IAAQ;;AAGT;IAAiB;WAKb;AAC/B,YAAO,AAAS,2CAAS;AACE,MAAjB,qDAAF,eAAR,iBAAoB,OAAO;IAC7B;;AAIE,UAAI;AACuB,QAAf,qDAAF,eAAR,iBAAoB;AACA,QAAV,iDAAF,eAAR,iBAAgB;AACD,QAAf,iBAAW;;IAEf;;;QAlCyB;QAClB;QACY;IACJ,iBAAE,OAAO;IACA,0BAAE,gBAAgB;AACxC,QAAI,KAAK;AAGL,MAFM,AAAQ,qDAAhB,OAAO,SAAgB,QAAC;AACV,QAAZ,AAAM,KAAD;;;EAGX;;;;;;;;;;;;;;;;;;;;;;;;;ACFkD;IAAsB;gBAK1C;AAC5B,UAAI,aAAa;AAGb,QAFF,AAAc,aAAD,WAAS,QAAC;AACD,UAApB,kBAAY,OAAO;;;IAGzB;kBAEyB;AACvB,UAAI,AAAQ,OAAD;AACT;;AAGI,8BAAoB,mDAA2B,gBAAW,OAAO;AACzD,sBAAkB,oCAAQ,iBAAiB;AAChC,MAAf,iDAAV,SAAS,EAAO;AACE,uBAAa,4DAClB,SAAS,oBACA,AAAQ,OAAD,0BAClB;AAC2B,UAAhC,oBAAc,AAAQ,OAAD;;AAE2B,MAAtD,AAAsB,oCAAC,AAAQ,OAAD,YAAc,UAAU;IACxD;mBAGiC;AAC/B,UAAI,gBAAgB;AAGhB,QAFF,AAAiB,gBAAD,WAAS,QAAC;AACO,UAA/B,qBAAe,eAAe;;;IAGpC;qBAE4B;;AACP,8BACf,AAAsB,oCAAC,AAAQ,OAAD;AACuC,WAAzE,iBAAiB;mBAAjB,OAAmB,UAAO,mDAA2B,gBAAW,OAAO;IACzE;mBAGmC;AAM/B,MALF,AAAmB,kBAAD,WAAS,QAAC;;AACD,gCACrB,AAAsB,oCAAC,SAAS;AACT,aAA3B,iBAAiB;qBAAjB,OAAmB;AACqB,QAAxC,AAAuB,sCAAO,SAAS;;IAE3C;oBAG6B;;AAG6B,MAAxD,AAAkB,4BAAI,kCAAgB,YAAO,SAAS;AACtD,kBAAO,AAAsB,oCAAC,SAAS,gBAAV,OAAa;YAAb,eAAiC;IAChE;;;QAnEsC;IACd,0BAAE,MAAM;IACH,+BAAE;AAH/B;;EAGkE;;;;;;;;;;;;;;;;;;;;;;;;;ACUtC;IAAS;;AAGR;IAAiB;WAKZ;AAChC,YACI,AAAU,4CAAS;AACK,MAAjB,sDAAF,eAAT,kBAAqB,OAAO;IAC9B;;AAIE,UAAI;AACwB,QAAf,sDAAF,eAAT,kBAAqB;AACA,QAAV,kDAAF,eAAT,kBAAiB;AACD,QAAhB,kBAAY;;IAEhB;;;QAnC0B;QACnB;QACY;IACH,kBAAE,QAAQ;IACF,0BAAE,gBAAgB;AACxC,QAAI,KAAK;AAGL,MAFO,AAAQ,sDAAjB,QAAQ,SAAgB,QAAC;AACX,QAAZ,AAAM,KAAD;;;EAGX;;;;;;;;;;;;;;;;;;;;;;;;;ACFiD;IAAuB;iBAKxC;AAG5B,MAFF,AAAe,cAAD,WAAS,QAAC;AACA,QAAtB,mBAAa,QAAQ;;IAEzB;mBAE2B;AACzB,UAAI,AAAS,QAAD;AACV;;AAGI,4BAAkB,qDAA6B,gBAAW,QAAQ;AACzD,uBAAmB,qCAAS,eAAe;AAChC,MAAf,kDAAX,UAAU,EAAO;AACE,uBAAa,8DAClB,UAAU,oBACF,AAAS,QAAD,0BACnB;AAC8B,UAAnC,qBAAe,AAAS,QAAD;;AAE4B,MAAzD,AAAuB,qCAAC,AAAS,QAAD,aAAe,UAAU;IAC3D;oBAGmC;AAG/B,MAFF,AAAkB,iBAAD,WAAS,QAAC;AACQ,QAAjC,sBAAgB,gBAAgB;;IAEpC;sBAE8B;;AACR,+BAChB,AAAuB,qCAAC,AAAS,QAAD;AAE2B,WAD/D,kBAAkB;mBAAlB,OACM,UAAO,qDAA6B,gBAAW,QAAQ;IAC/D;oBAGqC;AAMjC,MALF,AAAoB,mBAAD,WAAS,QAAC;;AACD,iCACtB,AAAuB,qCAAC,UAAU;AACV,aAA5B,kBAAkB;qBAAlB,OAAoB;AACsB,QAA1C,AAAwB,uCAAO,UAAU;;IAE7C;qBAI+B;;AAG6B,MAA1D,AAAkB,4BAAI,mCAAiB,YAAO,UAAU;AACxD,kBAAO,AAAuB,qCAAC,UAAU,gBAAX,OAAc;YAAd,eAAkC;IAClE;;;QAjEsC;IACd,0BAAE,MAAM;IACF,gCAAE;AAHhC;;EAGqE;;;;;;;;;;;;;;;;;;;;;;;;;;;AC0CxC;IAAiB;;AAGlB;IAAgB;;AAGhB;IAAO;;AAIC;IAAW;WAMzB;UACP;AAEb,YAAO,AAAQ,0CAAS;AACE,MAAjB,oDAAF,eAAP,gBAAmB,OAAO;AAC1B,UAAI,6BAAuB,oBAAoB;AACF,QAA9B,wDAAF,eAAX,oBAAuB,oBAAoB;;IAE/C;;AAIE,UAAI;AACsB,QAAxB,yBAAmB;AACK,QAAf,oDAAF,eAAP,gBAAmB;AACA,QAAV,gDAAF,eAAP,gBAAe;AACD,QAAd,gBAAU;;IAEd;;AAME,YAAO,AAAQ,0CAAS;AACxB,UAAI;AACkB,QAAT,AAAE,eAAb;AACwB,QAAxB,yBAAmB;;IAEvB;;AAME,YAAO,AAAQ,0CAAS;AACxB,UAAI;AACsC,QAA7B,AAAE,eAAb,wBAA2B,gDAAF,eAAP,iBAAc;AACT,QAAvB,yBAAmB;;IAEvB;;;QAlGwB;QACJ;QACb;QACW;QACA;QACA;QACC;IAVd,yBAAmB;IAWV,gBAAE,MAAM;IACJ,oBAAE,UAAU;IACN,0BAAE,gBAAgB;AACxC,QAAI,KAAK;AAGL,MAFK,AAAQ,oDAAf,MAAM,SAAgB,QAAC;AACT,QAAZ,AAAM,KAAD;;;AAGT,QAAI,WAAW;AAMX,MALK,AAAY,wDAAnB,MAAM,SAAoB,QAAC;;AACzB,YAAI,MAAM;AACsB,UAAvB,qDAAP,MAAM,EAAY,AAAM,KAAD;;AAEyB,QAAlD,AAAY,WAAD,EAAmB,KAAb,AAAM,KAAD,SAAC,aAAU;;;AAGrC,QAAI,MAAM;AAMN,MALK,AAAO,mDAAd,MAAM,SAAe,QAAC;;AACpB,YAAI,MAAM;AACsB,UAAvB,qDAAP,MAAM,EAAY,AAAM,KAAD;;AAEoB,QAA7C,AAAO,MAAD,EAAmB,KAAb,AAAM,KAAD,SAAC,aAAU;;;AAGhC,QAAI,SAAS;AAMT,MALK,AAAU,sDAAjB,MAAM,SAAkB,QAAC;;AACvB,YAAI,MAAM;AACsB,UAAvB,qDAAP,MAAM,EAAY,AAAM,KAAD;;AAEuB,QAAhD,AAAU,SAAD,EAAmB,KAAb,AAAM,KAAD,SAAC,aAAU;;;EAGrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnC+C;IAAqB;eAKxC;AACM,MAAhC,AAAa,YAAD,qBAAS;IACvB;iBAEuB;;AACrB,UAAI,AAAO,MAAD;AACR;;AAGI,8BAAoB,qDAA6B,MAAM;AAC3C;AAElB,UAAI,iBAAiB;AAC+B,QAAlD,eAAqB,uCAAW,iBAAiB;AAGjD,YAA8B,oBAA1B,AAAkB,iBAAD;AACb,wBAAoC,oBAA1B,AAAkB,iBAAD;AAG/B,UAFF,AAAQ,AAAQ,OAAT,kBAAgB,QAAC;AACW,YAAjC,uBAAiB,AAAO,MAAD;;;;AAKvB,gCAAgB,AAAqB,mCAAC,AAAO,MAAD,yBAAP,OAAmB;AAExD,8BAAoB,iDAAyB,MAAM,EAAE,aAAa;AAC3D,qBAAiB,mCAAO,iBAAiB;AAC9B,MAAf,gDAAT,QAAQ,EAAO;AACE,uBAAa,0DACpB,QAAQ,cACJ,YAAY,oBACN,AAAO,MAAD,0BACjB;AACqC,UAA1C,AAAK,0BAAqB,AAAO,MAAD;AACH,UAA7B,mBAAa,AAAO,MAAD;yCAER,QAAc;AACkB,UAA3C,yBAAmB,AAAO,MAAD,WAAW,MAAM;sCAEpC,QAAc;AACkB,UAAtC,oBAAc,AAAO,MAAD,WAAW,MAAM;yCAE5B,QAAc;AACkB,UAAzC,uBAAiB,AAAO,MAAD,WAAW,MAAM;;AAGO,MAAnD,AAAqB,mCAAC,AAAO,MAAD,WAAa,UAAU;IACrD;kBAG+B;AACS,MAAtC,AAAgB,eAAD,qBAAS;IAC1B;oBAE0B;;AACN,6BAAmB,AAAqB,mCAAC,AAAO,MAAD;AACjE,UAAI,gBAAgB;AACZ,4BAAgB,iDACpB,MAAM,EACN,AAAiB,gBAAD;AAEZ,yBAAa,qDAA6B,MAAM;AAIrD,QAHD,AAAiB,gBAAD,QACd,aAAa,yBAC6B,0BAApB,UAAU,eAAV,OAAY;;IAGxC;kBAGiC;AACS,MAAxC,AAAkB,iBAAD,qBAAS;IAC5B;oBAE4B;;AACF,6BAAmB,AAAqB,mCAAC,QAAQ;AAC/C,WAA1B,gBAAgB;mBAAhB,OAAkB;AACoB,MAAtC,AAAsB,qCAAO,QAAQ;IACvC;yBAOmC;;AACP,MAA1B;AACkB,6BAAmB,AAAqB,mCAAC,QAAQ;AACjC,WAAlC,gBAAgB;mBAAhB,OAAkB;IACpB;yBAKmC;;AACf,6BAAmB,AAAqB,mCAAC,QAAQ;AACjC,WAAlC,gBAAgB;mBAAhB,OAAkB;IACpB;sBAKgC;;AACZ,6BAAmB,AAAqB,mCAAC,QAAQ;AACnE,kBAAO,gBAAgB,eAAhB,OAAkB;YAAlB,eAAqC;IAC9C;mBAI2B;;AAG6B,MAAtD,AAAkB,4BAAI,iCAAe,YAAO,QAAQ;AACpD,kBAAO,AAAqB,mCAAC,QAAQ,gBAAT,OAAY;YAAZ,eAAgC;IAC9D;uBAE+B;AAC6B,MAA1D,AAAkB,4BAAI,qCAAmB,YAAO,QAAQ;IAC1D;yBAEiC,UAAuB;AAKpD,MAJF,AAAkB,4BAAI,uCACpB,YACA,0CAAkB,MAAM,GACxB,QAAQ;IAEZ;oBAE4B,UAAuB;AAK/C,MAJF,AAAkB,4BAAI,kCACpB,YACA,0CAAkB,MAAM,GACxB,QAAQ;IAEZ;uBAE+B,UAAuB;AAKlD,MAJF,AAAkB,4BAAI,qCACpB,YACA,0CAAkB,MAAM,GACxB,QAAQ;IAEZ;;AAM2D,MAHzD,AAAsB,AACjB,AAEA,6CAFM,QAAC,cACJ,AAAW,UAAD,YAAW,QAAQ,AAAW,UAAD,yDAClC,QAAC,cAAe,AAAW,UAAD;IACzC;;;QAjKsC;IACd,0BAAE,MAAM;IACJ,8BAAE;AAH9B;;EAG+D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+DCQvC;AACxB,QAAI,AAAM,KAAD;AACP,YAAO;;AAET,UAAO,AAAI,OAAE,AAAM,AAAM,AAAkB,AAAgB,KAAzC,uBAAqB,cAAY,GAAG,iBAAe;EACvE;mEAG4B;AAC1B,QAAI,AAAM,KAAD;AACP,YAAO;;AAET,UAAO,AAAM,MAAD;EACd;yFAkBgE;;AAC7C,kBAAgB;AAEjC,QAAI,AAAoB,0DAAY,AAAU,UAAA,QAAC;AACiB,MAA9D,AAAQ,OAAD,aAAa,AAAmB,mDAAC,AAAU,UAAA,QAAC;;AAGrD,QAAI,AAAU,UAAA,QAAC;AAGsC,WAFnD,OAAO;MAAP;AACI,iCAA4C,WAAlC,AAAU,UAAA,QAAC,kCAAwB;AAC7C,iCAA4C,WAAlC,AAAU,UAAA,QAAC,kCAAwB;;;;AAGnD,QAAI,AAAU,UAAA,QAAC;;AAKf,QAAI,AAAU,UAAA,QAAC;AAC0C,MAAvD,AAAQ,OAAD,eAAC,aAAc,AAAU,UAAA,QAAC;;AAGnC,QAAI,AAAU,UAAA,QAAC;AACwB,MAA7B,uDAAR,OAAO,EAAC,4BAAS,AAAU,UAAA,QAAC;;AAG9B,QAAwC,YAApC,AAAU,UAAA,QAAC,0BAA4B,UACL,YAAlC,AAAU,UAAA,QAAC,wBAA0B;AACP,MAAhC,AAAQ,OAAD,mBAAmB;;AAEM,MAAhC,AAAQ,OAAD,mBAAmB;;AAIE,IAA9B,AAAQ,OAAD,kBAAkB;AACQ,IAAjC,AAAQ,OAAD,qBAAqB;AACK,IAAjC,AAAQ,OAAD,qBAAqB;AAE5B,UAAO,QAAO;EAChB;iFAGiB,iBACE;AAGjB,QAAI,eAAe;AACkB,MAAnC,AAAQ,OAAD,QAAQ,AAAgB,eAAD;AAEwC,MADtE,AAAQ,OAAD,UAAgB,mCACnB,AAAgB,AAAO,eAAR,kBAAkB,AAAgB,AAAO,eAAR;;AAEtD,UAAO,QAAO;EAChB;mFAGiD;;AAC/C,yBAAoC,KAA7B,AAAU,UAAA,QAAC,mBAAD,aAAsB;EACzC;qEAUyB;AACvB,UAAO,AAAc,AAAiC,oDAApB,AAAM,AAAK,KAAN;EACzC;2DAG4C;AACjB,iBAAS;AAClC,QAAI,YAAY;AAaD,eAZb,0BAYK,WADA,YAXI,AACJ,oBAAO,YAAY,YAAW,SAAC,KAAK;;AACnC,cAAU,YAAN,KAAK,KAAW,wCAAgB,KAAK;AACvC,iBA7EuB;kBA6EV;AACT,8CAAc,AAAK,KAAA,QAAC;AACpB,8CAAc,AAAK,KAAA,QAAC;AACpB,4EACoB,AAAS,AAAqB,aAA/C,AAAK,KAAA,QAAC,gCAAwB,QAAC,KAAM,6BAAM,CAAC;;;;AAErD,gBAAO,MAAK;;;AAMpB,UAAO,OAAM;EACf;yEAEsC;AACpC,UAAa,oCAAO,AAAO,MAAD,WAAW,AAAO,MAAD;EAC7C;yEAEsC;AACpC,UAAO,yBAAc,AAAI,gDAAX,MAAM,gBAAwB,AAAI,gDAAX,MAAM;EAC7C;iGAE8D;AAC5D,UAAO,2CACM,0CAA+B,4DAAb,YAAY,eAC9B,0CAA+B,4DAAb,YAAY;EAE7C;6FAEsD;;AACpD,UAAO,wCACG,2CAA6B,KAAP,iDAAJ,GAAG,GAAC,aAAU,2DACP,cAApB,kDAAJ,GAAG,iBAAC,OAAS,mBAAT,eAAuB,oBACT,eAAjB,+CAAJ,GAAG,kBAAC,OAAM,oBAAN,eAAoB,oBACH,eAAjB,+CAAJ,GAAG,kBAAC,OAAM,oBAAN,eAAoB;EAElC;+FAM6D;;AACrD,uBAAsC,KAAxB,AAAO,AAAW,MAAZ,mBAAY,aAAS;AACzC,yBAA0C,MAA1B,AAAO,AAAW,MAAZ,qBAAY,cAAW;AAInD,QAAK,AAAY,WAAD,cAAc,AAAc,aAAD;AACzC,YAAO;;AAKS,mDAAY;AAC1B,kBAAK,AAAkD,kBAAlC,AAAO,AAAS,MAAV,kBAAgB;;;AAE/C,QAAI,AAAY,WAAD;AACK,oDAAuB;AACrC,2BAAY;AACZ,2BAAY,WAAW;;;AACE,MAA7B,AAAU,AAAS,SAAV,kBAAc,KAAK;;AAE9B,QAAI,AAAc,aAAD;AACG,mDAAU;AACxB,2BAAY;AACZ,4BACA,2BAAa,aAAa,mBACO;;;AAEN,MAA/B,AAAU,AAAS,SAAV,kBAAc,OAAO;;AAGhC,WAvJiC;UAuJpB;AACT,qBAAU,SAAS;AACnB,oBAAS,AAAO,MAAD;;;EAGrB;uFAMS,QACO;;AAER,qBAAkC,aAArB,AAAO,AAAK,MAAN;AACb;AAEZ,QAAI,UAAU;AACZ,UAAkB,YAAd,AAAU,UAAA,QAAC,IAAM;AACnB,cAAO,AAAW,AAAO,UAAR,aAAW;AAK+B,QAD3D,QAAa,KA9KgB,IA8KhB;AACT,mBAAS,AAAoB,kDAAY,AAAU,UAAA,QAAC;;;AAGxD,YAAI,AAAW,AAAO,UAAR,aAAW,KAAK,AAAU,UAAA,QAAC;AACjC,qBAAa,6CAAkB,WAAb,AAAU,UAAA,QAAC,aAAG,kBAAiB,WAAb,AAAU,UAAA,QAAC,aAAG;AAGnC,gBAFrB,IAAI;UAAJ;AACI,uBAAO,IAAI;AACX,6BAAa,IAAI;;;;YAElB,KAAkB,YAAd,AAAU,UAAA,QAAC,IAAM;AAEhB,qCAAQ,AAAU,UAAA,QAAC;AACvB,mBAAO,cAAK,CAAC,KAAK;AACoC,QAA5D,QAAa,OA5LgB,IA4LhB;AAAQ,qBAAU,iCAAwB,IAAI;;;;;AAG/D,WA/LiC;UA+LpB;AACT,uBAAmC,YAAxB,aAAa,eAAb,OAAe,2DAAf,cACH,mCACJ,AAAO,AAAS,MAAV,oBACN,AAAO,AAAS,MAAV;AAEV,mBAAQ,4BAAqC,OAAxB,AAAO,AAAW,MAAZ,mBAAY,eAAS;AAChD,oBAAS,AAAO,MAAD;AACf,qBAAU,AAAO,MAAD;AAChB,qBAAU,AAAO,MAAD;AAChB,uBAAY,AAAO,MAAD;AAClB,kBAAO,IAAI;;;EAGjB;uFAEoD;;AAC5C,yBAAsB,KAhNK,IAgNL;AACxB,uBAAc,qCAAa,AAAO,MAAD;AACjC,yBAAgB,uCAAe,AAAO,MAAD;AACrC,wBAAe,AAAO,MAAD;AACrB,qBAAY,qCAAa,AAAO,MAAD;AAC/B,uBAAc,uCAAe,AAAO,MAAD;AACnC,kBAAe,mCAAO,AAAO,AAAO,MAAR,kBAAkB,AAAO,AAAO,MAAR;AACpD,kBAAS,AAAO,MAAD;AACf,mBAAU,AAAO,MAAD;AAChB,kBAAS,AAAO,MAAD;;;AACnB,UAAO,cAAa;EACtB;2FAGe,WAAmB;;AACb,eAAO;AAGxB,IAFF,AAAQ,AAAO,OAAR,kBAAgB,QAAC;AACY,MAAlC,AAAK,IAAD,OAAK,0CAAkB,KAAK;;AAE5B,2BAAmB,4CAAoB,IAAI;AACxB,gBAAQ,8BAAC,IAAI;AAClC,oBAAY;AAed,IAdF,AAAQ,AAAM,OAAP,iBAAe,QAAC;AACF,qBACf,AAAK,AAAyC,IAA1C,oFAAK,QAAC,SAAU,0CAAkB,KAAK;AAC/C,UAAI,AAA8B,4CAAV,QAAQ,MAAK,gBAAgB;AACd,QAArC,WAAW,AAAS,AAAS,QAAV;AACnB;AAIoE,UAHlE,WAAK,AACD,oBAAQ,SAAS,uBAAgB,AAAQ,AAAU,OAAX,mBAAiB,yBACzD,yFACA;;;AAGW,MAAnB,AAAM,KAAD,OAAK,QAAQ;AACP,MAAX,YAAA,AAAS,SAAA;;AAEX,SArPiC;UAqPpB;AACT,iBAAQ,KAAK;AACb,uBAAc,qCAAa,AAAQ,OAAD;AAClC,yBAAgB,uCAAe,AAAQ,OAAD;AACtC,wBAAe,AAAQ,OAAD;AACtB,qBAAY,qCAAa,AAAQ,OAAD;AAChC,uBAAc,uCAAe,AAAQ,OAAD;AACpC,mBAAU,AAAQ,OAAD;AACjB,kBAAS,AAAQ,OAAD;AAChB,oBAAW,AAAQ,OAAD;;;EACxB;6EAa4C;AACtC,oBAAY;AAChB,aAAS,IAAI,GAAG,AAAE,CAAD,GAAG,AAAK,IAAD,WAAS,IAAA,AAAC,CAAA;AAGwB,MAFxD,YAAY,AAAU,SAAD,GACgC,CAAnB,AAAI,gDAAhC,AAAI,IAAA,QAAS,CAAP,AAAE,CAAD,GAAG,YAAK,AAAK,IAAD,eAAuB,gDAAR,AAAI,IAAA,QAAC,CAAC,OACT,AAAI,gDAAhC,AAAI,IAAA,QAAS,CAAP,AAAE,CAAD,GAAG,YAAK,AAAK,IAAD,eAAuB,gDAAR,AAAI,IAAA,QAAC,CAAC;;AAEnD,UAAO,AAAU,UAAD,IAAI;EACtB;+FAGe,WAAoB;;AACd,gBAAQ;AAGzB,IAFF,AAAS,AAAO,QAAR,kBAAgB,QAAC;AACY,MAAnC,AAAM,KAAD,OAAK,0CAAkB,KAAK;;AAGnC,SA7RiC;UA6RpB;AACT,gBAAO,KAAK;AACZ,wBAAe,AAAS,QAAD;AACvB,uBAAc,qCAAa,AAAS,QAAD;AACnC,yBAAgB,uCAAe,AAAS,QAAD;AACvC,mBAAU,AAAS,QAAD;AAClB,kBAAS,AAAS,QAAD;AACjB,oBAAW,AAAS,QAAD;;;EAMzB;2EAGmC,KAAkB;;AAC7C,eAAuB,aAAhB,AAAO,MAAD;AACnB,YAAQ,AAAI,IAAA,QAAC;;;AAEuB,QAA5B,kDAAJ,GAAG,EAAC,YAAiB,WAAP,AAAI,IAAA,QAAC,aAAG;AACI,QAAtB,+CAAJ,GAAG,EAAC,YAAc,WAAP,AAAI,IAAA,QAAC,aAAG;AACgD,QAAnE,AAAI,GAAD,OAAa,+CAAwB,WAAV,WAAP,AAAI,IAAA,QAAC,aAAG,qBAAU,kBAAqB,WAAV,WAAP,AAAI,IAAA,QAAC,aAAG,qBAAU;AACrC,QAAtB,+CAAJ,GAAG,EAAC,YAAc,WAAP,AAAI,IAAA,QAAC,aAAG;AACnB;;;;AAE+C,QAA/C,AAAI,GAAD,OAAa,+CAAc,WAAP,AAAI,IAAA,QAAC,aAAG,kBAAW,WAAP,AAAI,IAAA,QAAC,aAAG;AAC3C;;;;AAEkB,QAAd,+CAAJ,GAAG,EAAC,YAAO,AAAI,IAAA,QAAC;AAC+B,QAA/C,AAAI,GAAD,OAAa,+CAAc,WAAP,AAAI,IAAA,QAAC,aAAG,kBAAW,WAAP,AAAI,IAAA,QAAC,aAAG;AAC3C;;;;AAIgD,QAFhD,AAAI,GAAD,WAAiB,yCACV,+CAAiB,WAAH,WAAP,AAAI,IAAA,QAAC,aAAG,cAAG,kBAAc,WAAH,WAAP,AAAI,IAAA,QAAC,aAAG,cAAG,OACjC,+CAAiB,WAAH,WAAP,AAAI,IAAA,QAAC,aAAG,cAAG,kBAAc,WAAH,WAAP,AAAI,IAAA,QAAC,aAAG,cAAG;AAG3C;;;;AAE2B,QAA3B,AAAI,GAAD,mBAAO,AAAI,IAAA,QAAC,iBAAI,AAAI,IAAA,QAAC;AACxB;;;;AAEc;AACP,wCAAoB,KAAR,AAAI,IAAA,QAAC,IAAD,aAAO;AAE1B,2BAAe,AAAU,SAAD,GAAG,IAAI,AAAU,SAAD,aAAW,AAAU,SAAD;AAChE,YAAI,AAAK,AAAO,IAAR,cAAW;AAEjB;AAC2D,YAAzD,cAAc,uCAAe,GAAG,cAAS,WAAP,AAAI,IAAA,QAAC,aAAG,kBAAW,WAAP,AAAI,IAAA,QAAC,aAAG;;gBAC/C;AAAP;;;;;AAKqC,QAArC,+CAAJ,GAAG,EAAwB,cAAN,KAAL,+CAAJ,GAAG,GAAC,aAAQ,WAAK,YAAY;AACzC,YAAI,WAAW;AACS,UAAtB,AAAI,GAAD,OAAO,WAAW;;AAEvB;;;;AAE8B,QAA1B,+CAAJ,GAAG,EAAwB,cAAN,MAAL,+CAAJ,GAAG,GAAC,cAAQ,YAAK;AAC7B;;;;AAE8B,QAA1B,+CAAJ,GAAG,EAAwB,cAAN,OAAL,+CAAJ,GAAG,GAAC,eAAQ,aAAK;AAC7B;;;;AAEkB,QAAd,+CAAJ,GAAG,EAAC,YAAO,AAAI,IAAA,QAAC;AAChB;;;;AAEiE,QAAjE,WAAM,gCAAmB,AAAuC,wCAAV,AAAI,IAAA,QAAC,MAAG;;;EAEpE;mEAGuC,KAAS,GAAO;AAC/C,iBAAa,iDAAJ,GAAG;AACZ,qBAAiB,qDAAJ,GAAG;AAChB,eAAW,+CAAJ,GAAG;AAEhB,UACI,AAAO,MAAD,6BAAU;AACpB,UAAO,AAAW,UAAD,6BACb;AACJ,UAAO,AAAK,IAAD,6BACP;AAEE,aAAa,4DAAF,eAAN,MAAM;AACX,aAAY,4DAAP,MAAM;AAEX,mBAA6C,eAAL,AAAC,eAAlB,kEAAF,eAAV,UAAU,IAAqB,EAAE;AAC5C,qBAA8C,eAAL,AAAC,eAAlB,kEAAX,UAAU,GAAoB,EAAE;AAE7C,gBAAU,CAAF,eAAU,AAAE,eAAN,IAAI;AAElB,gBACI,kCAAO,AAAE,AAAS,CAAV,GAAG,KAAK,GAAgB,eAAZ,AAAW,UAAD,KAAM,AAAE,AAAS,CAAV,GAAG,KAAK,GAAc,eAAV,AAAS,QAAD;AAEnE,UAA2C,gBAAR,AAAC,eAAlB,kEAAX,UAAU,GAAoB,KAAK;EAC5C;;MApbM,wCAAgB;YAAS,oCAAO,GAAG;;MACnC,8CAAsB;YAClB,0CAAa,0CAAkB;;MAGnC,wCAAgB;YAAG;;MACnB,0CAAkB;YAAG;;MAIrB,2CAAmB;YAAG,4CAC1B,GAAmB,2CACnB,GAAmB,2CACnB,GAAmB,6CACnB,GAAmB,2CACnB,GAAmB;;MA+Ff,qCAAa;YAAG,iCACpB,eACA,eACA","file":"../../../../../../../../packages/google_maps_flutter_web/src/types.dart.lib.js"}');
  // Exports:
  return {
    src__types: types,
    google_maps_flutter_web: google_maps_flutter_web
  };
}));

//# sourceMappingURL=types.dart.lib.js.map
